{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json", 
    "contentVersion": "6.0.0.2", 
    "parameters": {
        "AzureAvailabilityType": {
            "allowedValues": [
                "None", 
                "External_Azure_Load_Balancer",
                "Azure_API",
                "Azure_Autoscale"
            ], 
            "defaultValue": "External_Azure_Load_Balancer", 
            "metadata": {
                "description": "Type of Azure Availability method you want to combine with F5 BIGIP availability method."
                        }, 
            "type": "string"
            },
        "AzureRessourcesStackPlacement": {
            "allowedValues": [
                    "New_Stack", 
                    "Existing_Stack"
            ], 
            "defaultValue": "New_Stack", 
            "metadata": {
                "description": "Placement of created BIGIP into new stack or existing stack."
                        }, 
            "type": "string"
            },
        "AzureAvailabilityOptions": {
                "type": "string",
                "allowedValues": [
                    "Availability Zone",
                    "Availability Set"
                ],
                "defaultValue": "Availability Zone",
                "metadata": {
                    "description": "Choose your Availability option. If you select Availability Zone Option, a Standard Azure Load Balancer will be used instead of Basic."
                }
    
            },
        "AzureAvailabilityZoneRegion": {
               "type": "string",
               "allowedValues": [
                   "westeurope",
                   "francecentral",
                   "eastus2",
                   "westus2",
                   "centralus",
                   "northeurope",
                   "southeastasia"
    
               ],
               "defaultValue": "westeurope",           
               "metadata": {
                    "description": "Region where the VM is located. Only some regions support Availability Zones during preview. Make Sure region you select here supports Availability Zones feature. This setting takes precedence over Region location above. This setting is not relevant if you selected Availability Set option above."
                }
            },
        "AzureAvailabilityZoneForBigIpMember1": {
                "type": "string",
                "allowedValues": [
                    "",
                    "1",
                    "2",
                    "3"
                ],
                "defaultValue": "1",
                "metadata": {
                    "description": "Availability Zone number for F5 Big-IP Member 1. Big-IP members should be placed in different zones. This setting is not relevant if you selected Availability Set option above."
                }
            },
        "AzureAvailabilityZoneForBigIpMember2": {
                "type": "string",
                "allowedValues": [
                    "",
                    "1",
                    "2",
                    "3"
                ],
                "defaultValue": "2",
                "metadata": {
                    "description": "Availability Zone number for F5 Big-IP Member 2. Big-IP members should be placed in different zones. This setting is not relevant if you selected Availability Set option above."
                }
            },
            "AzureAvailabilityZoneForBigIpMember3": {
                "type": "string",
                "allowedValues": [
                    "",
                    "1",
                    "2",
                    "3"
                ],
                "defaultValue": "3",
                "metadata": {
                    "description": "Availability Zone number for F5 Big-IP Member 3. Big-IP members should be placed in different zones. This setting is not relevant if you selected Availability Set option above."
                }
            },
            "AzureAvailabilityZoneForPublicIpAddresses": {
                "type": "string",
                "allowedValues": [
                    "ZoneRedundant",
                    "1",
                    "2",
                    "3"
                ],
                "defaultValue": "ZoneRedundant",
                "metadata": {
                    "description": "Availability Zone number for Azure Public IP Addresses objects that are used by Azure Load Balancer. Default is Zone-redundant (recommended). This setting is not relevant if you selected Availability Set option above."
                }
            },  
        "BIGIPAvailabilityType": {
                "allowedValues": [
                    "StandAlone", 
                    "Cluster_with_2_members",
                    "Cluster_with_3_members",
                    "Cluster_in_Autoscaling_mode"
                ], 
                "defaultValue": "Cluster_with_2_members", 
                "metadata": {
                    "description": "Type of BIG-IP deployment you want to setup"
                            }, 
                "type": "string"
                },
        "NumberOfNICToBeCreatedForBIGIP": {
                "allowedValues": [
                        "1",
                        "2", 
                        "3"
                ], 
                "defaultValue": "3", 
                "metadata": {
                    "description": "Select number Of NICs to be created for BIGIP"
                            }, 
                "type": "string"
                },                        
        "BIGIPModulesToInstall": {
            "allowedValues": [
                "LTM", 
                "AWAF",
                "LTM+AWAF"
            ], 
            "defaultValue": "LTM", 
            "metadata": {
                "description": "Select BIGIP modules you want to provision"
                        }, 
            "type": "string"
            },

       "adminUsername": {
            "defaultValue": "admin-admin", 
            "metadata": {
                "description": "User name for the Virtual Machine."
            }, 
            "type": "string"
        }, 
        "authenticationType": {
            "allowedValues": [
                "password", 
                "sshPublicKey"
            ], 
            "defaultValue": "password", 
            "metadata": {
                "description": "Type of authentication to use on the Virtual Machine, password based authentication or key based authentication."
            }, 
            "type": "string"
        }, 
        "adminPasswordOrKey": {
            "metadata": {
                "description": "Password or SSH public key to login to the Virtual Machine. Note: There are a number of special characters that you should avoid using for F5 product user accounts.  See [K2873](https://support.f5.com/csp/article/K2873) for details. Note: If using key-based authentication, this should be the public key as a string, typically starting with **---- BEGIN SSH2 PUBLIC KEY ----** and ending with **---- END SSH2 PUBLIC KEY ----**."
            }, 
            "type": "securestring"
        },       
        "dnsLabel": {
            "defaultValue": "", 
            "metadata": {
                "description": "Unique DNS Name for the Public IP address used to access the Virtual Machine."
            }, 
            "type": "string"
        }, 
        "instanceName": {
            "defaultValue": "f5vm", 
            "metadata": {
                "description": "Name of the Virtual Machine."
            }, 
            "type": "string"
        }, 
        "instanceType": {
            "allowedValues": [
                "Standard_A3", 
                "Standard_A4", 
                "Standard_A5", 
                "Standard_A6", 
                "Standard_A7", 
                "Standard_D3", 
                "Standard_D4", 
                "Standard_D11", 
                "Standard_D12", 
                "Standard_D13", 
                "Standard_D14", 
                "Standard_DS3", 
                "Standard_DS4", 
                "Standard_DS11", 
                "Standard_DS12", 
                "Standard_DS13", 
                "Standard_DS14", 
                "Standard_D3_v2", 
                "Standard_D4_v2", 
                "Standard_D5_v2", 
                "Standard_D11_v2", 
                "Standard_D12_v2", 
                "Standard_D13_v2", 
                "Standard_D14_v2", 
                "Standard_D15_v2", 
                "Standard_DS3_v2", 
                "Standard_DS4_v2", 
                "Standard_DS5_v2", 
                "Standard_DS11_v2", 
                "Standard_DS12_v2", 
                "Standard_DS13_v2", 
                "Standard_DS14_v2", 
                "Standard_DS15_v2", 
                "Standard_F4", 
                "Standard_F8", 
                "Standard_F4S", 
                "Standard_F8S", 
                "Standard_F16S", 
                "Standard_G3", 
                "Standard_G4", 
                "Standard_G5", 
                "Standard_GS3", 
                "Standard_GS4", 
                "Standard_GS5"
            ], 
            "defaultValue": "Standard_DS3_v2", 
            "metadata": {
                "description": "Instance size of the Virtual Machine."
            }, 
            "type": "string"
        }, 
        "consumptionModelAndImageName": {
            "allowedValues": [ 
                "BYOL_AllTwoBootLocations",
                "BYOL_AllOneBootLocation",
                "BYOL_LTMTwoBootLocations",
                "BYOL_LTMOneBootLocation",
                "BIGIQ_AllTwoBootLocations",
                "BIGIQ_AllOneBootLocation",
                "BIGIQ_LTMTwoBootLocations",
                "BIGIQ_LTMOneBootLocation",            
                "PAYG_Best25Mbps", 
                "PAYG_Best200Mbps", 
                "PAYG_Best1Gbps", 
                "PAYG_Better25Mbps", 
                "PAYG_Better200Mbps", 
                "PAYG_Better1Gbps", 
                "PAYG_Good25Mbps", 
                "PAYG_Good200Mbps", 
                "PAYG_Good1Gbps", 
                "PAYG_AdvancedWaf25Mbps", 
                "PAYG_AdvancedWaf200Mbps", 
                "PAYG_AdvancedWaf1Gbps"
            ], 
            "defaultValue": "BYOL_AllTwoBootLocations", 
            "metadata": {
                "description": "Consumption Model and F5 SKU (image) to you want to deploy. Note: The disk size of the VM will be determined based on the option you select.  **Important**: If intending to provision multiple modules, ensure the appropriate value is selected, such as ****BYOL_AllTwoBootLocations or AllOneBootLocation****."
            }, 
            "type": "string"
        }, 
        "bigIpVersion": {
            "allowedValues": [
                "13.1.100000", 
                "12.1.303000", 
                "latest"
            ], 
            "defaultValue": "13.1.100000", 
            "metadata": {
                "description": "F5 BIG-IP version you want to use."
            }, 
            "type": "string"
        }, 
        "bigIqAddress": {
            "defaultValue": "IGNORE_IF_BYOL_OR_PAYG_IS_CHOSEN", 
            "metadata": {
                "description": "The IP address (or hostname) for the BIG-IQ to be used when licensing the BIG-IP.  Note: The BIG-IP will make a REST call to the BIG-IQ (already existing) to let it know a BIG-IP needs to be licensed. It will then license the BIG-IP using the provided BIG-IQ credentials and license pool."
            }, 
            "type": "string"
        }, 
        "bigIqUsername": {
            "defaultValue": "IGNORE_IF_BYOL_OR_PAYG_IS_CHOSEN",
            "metadata": {
                "description": "The BIG-IQ username to use during BIG-IP licensing via BIG-IQ."
            }, 
            "type": "string"
        }, 
        "bigIqPassword": {
            "defaultValue": "IGNORE_IF_BYOL_OR_PAYG_IS_CHOSEN",
            "metadata": {
                "description": "The BIG-IQ password to use during BIG-IP licensing via BIG-IQ."
            }, 
            "type": "securestring"
        }, 
        "bigIqLicensePoolName": {
            "defaultValue": "IGNORE_IF_BYOL_OR_PAYG_IS_CHOSEN",
            "metadata": {
                "description": "The BIG-IQ license pool to use during BIG-IP licensing via BIG-IQ."
            }, 
            "type": "string"
        }, 
        "bigIqLicenseSkuKeyword1": {
            "defaultValue": "OPTIONAL", 
            "metadata": {
                "description": "The BIG-IQ license filter (based on SKU keyword) you want to use for licensing the BIG-IPs from the BIG-IQ, for example **F5-BIG-MSP-LTM-25M**, **F5-BIG-MSP-BR-200M**, **F5-BIG-MSP-BT-1G** or **F5-BIG-MSP-ASM-1G**. ***Important***: This is only required when licensing with an ELA/subscription (utility) pool on the BIG-IQ, if not using this pool type leave the default of **OPTIONAL**."
            }, 
            "type": "string"
        }, 
        "bigIqLicenseUnitOfMeasure": {
            "defaultValue": "OPTIONAL", 
            "metadata": {
                "description": "The BIG-IQ license unit of measure to use during BIG-IP licensing via BIG-IQ, for example **yearly**, **monthly**, **daily** or **hourly**. ***Important***: This is only required when licensing with an ELA/subscription (utility) pool on the BIG-IQ, if not using this pool type leave the default of **OPTIONAL**."
            }, 
            "type": "string"
        }, 
        "licenseKey1": {
            "defaultValue": "BIG-IP_Member_1_IGNORE_IF_BIG-IQ_OR_PAYG_IS_CHOSEN", 
            "metadata": {
                "description": "The license token for the F5 BIG-IP VE (BYOL)."
            }, 
            "type": "string"
        }, 
        "licenseKey2": {
            "defaultValue": "BIG-IP_Member_2_IGNORE_IF_BIG-IQ_OR_PAYG_IS_CHOSEN", 
            "metadata": {
                "description": "The license token for the F5 BIG-IP VE (BYOL). This field is required when deploying two or more devices."
            }, 
            "type": "string"
        },
        "licenseKey3": {
            "defaultValue": "BIG-IP_Member_3_IGNORE_IF_BIG-IQ_OR_PAYG_IS_CHOSEN", 
            "metadata": {
                "description": "The license token for the F5 BIG-IP VE (BYOL). This field is required when deploying two or more devices."
            }, 
            "type": "string"
        },

        "numberOfExternalIps": {
            "allowedValues": [
                0, 
                1, 
                2, 
                3, 
                4, 
                5, 
                6, 
                7, 
                8, 
                9, 
                10, 
                11, 
                12, 
                13, 
                14, 
                15, 
                16, 
                17, 
                18, 
                19, 
                20
            ], 
            "defaultValue": 1, 
            "metadata": {
                "description": "The number of public/private IP addresses you want to deploy for the application traffic (external) NIC on the BIG-IP VE to be used for virtual servers."
            }, 
            "type": "int"
        }, 
        "vnetAddressPrefix": {
            "defaultValue": "10.0", 
            "metadata": {
                "description": "The start of the CIDR block the BIG-IP VEs use when creating the Vnet and subnets.  You MUST type just the first two octets of the /16 virtual network that will be created, for example '10.0', '10.100', 192.168'."
            }, 
            "type": "string"
        }, 
        "enableNetworkFailover": {
            "allowedValues": [
                "No", 
                "Yes"
            ], 
            "defaultValue": "Yes", 
            "metadata": {
                "description": "Enabling failover creates a traditional active/standby deployment with traffic groups and mirroring. When failover is disabled, all devices are active; use traffic group none."
            }, 
            "type": "string"
        }, 
        "AzureInternalLoadBalancerType": {
            "allowedValues": [
                "Per-protocol", 
                "All-protocol", 
                "DO_NOT_USE"
            ], 
            "defaultValue": "Per-protocol", 
            "metadata": {
                "description": "Specify a the type of internal Azure load balancer to deploy. Note: As of the initial release of this template, the all-protocol Azure load balancer is in public preview. Please ensure that this feature is enabled before selecting **All-protocol**."
            }, 
            "type": "string"
        }, 
        "AzureInternalLoadBalancerProbePort": {
            "defaultValue": "3456", 
            "metadata": {
                "description": "Specify a TCP port for the internal load balancer to monitor. If you specified DO_NOT_USE for internal load balancer type, this setting has no effect."
            }, 
            "type": "string"
        }, 
        "ntpServer": {
            "defaultValue": "0.pool.ntp.org", 
            "metadata": {
                "description": "Leave the default NTP server the BIG-IP uses, or replace the default NTP server with the one you want to use."
            }, 
            "type": "string"
        }, 
        "timeZone": {
            "defaultValue": "UTC", 
            "metadata": {
                "description": "If you would like to change the time zone the BIG-IP uses, enter the time zone you want to use. This is based on the tz database found in /usr/share/zoneinfo (see the full list [here](https://github.com/F5Networks/f5-azure-arm-templates/blob/master/azure-timezone-list.md)). Example values: UTC, US/Pacific, US/Eastern, Europe/London or Asia/Singapore."
            }, 
            "type": "string"
        }, 
        "customImage": {
            "defaultValue": "OPTIONAL", 
            "metadata": {
                "description": "If you would like to deploy using a local BIG-IP image, provide either the full URL to the VHD in Azure storage **or** the full resource ID to an existing Microsoft.Compute image resource.  **Note**: Unless specifically required, leave the default of **OPTIONAL**."
            }, 
            "type": "string"
        }, 
        "restrictedSrcAddress": {
            "defaultValue": "*", 
            "metadata": {
                "description": "This field restricts management access to a specific network or address. Enter an IP address or address range in CIDR notation, or asterisk for all sources"
            }, 
            "type": "string"
        }, 
        "tagValues": {
            "defaultValue": {
                "application": "APP", 
                "cost": "COST", 
                "environment": "ENV", 
                "group": "GROUP", 
                "owner": "OWNER"
            }, 
            "metadata": {
                "description": "Default key/value resource tags will be added to the resources in this deployment, if you would like the values to be unique adjust them as needed for each key."
            }, 
            "type": "object"
        }, 
        "allowUsageAnalytics": {
            "allowedValues": [
                "Yes", 
                "No"
            ], 
            "defaultValue": "Yes", 
            "metadata": {
                "description": "This deployment can send anonymous statistics to F5 to help us determine how to improve our solutions. If you select **No** statistics are not sent."
            }, 
            "type": "string"
        }
    }, 
    "variables": {
        "ConsumptionImageMap": {
            "advancedwaf1gbps": {
                "offer": "f5-big-ip-advanced-waf", 
                "sku": "f5-bigip-virtual-edition-1g-waf-hourly"
            }, 
            "advancedwaf200mbps": {
                "offer": "f5-big-ip-advanced-waf", 
                "sku": "f5-bigip-virtual-edition-200m-waf-hourly"
            }, 
            "advancedwaf25mbps": {
                "offer": "f5-big-ip-advanced-waf", 
                "sku": "f5-bigip-virtual-edition-25m-waf-hourly"
            }, 
            "best1gbps": {
                "offer": "f5-big-ip-best", 
                "sku": "f5-bigip-virtual-edition-1g-best-hourly"
            }, 
            "best200mbps": {
                "offer": "f5-big-ip-best", 
                "sku": "f5-bigip-virtual-edition-200m-best-hourly"
            }, 
            "best25mbps": {
                "offer": "f5-big-ip-best", 
                "sku": "f5-bigip-virtual-edition-25m-best-hourly"
            }, 
            "better1gbps": {
                "offer": "f5-big-ip-better", 
                "sku": "f5-bigip-virtual-edition-1g-better-hourly"
            }, 
            "better200mbps": {
                "offer": "f5-big-ip-better", 
                "sku": "f5-bigip-virtual-edition-200m-better-hourly"
            }, 
            "better25mbps": {
                "offer": "f5-big-ip-better", 
                "sku": "f5-bigip-virtual-edition-25m-better-hourly"
            }, 
            "good1gbps": {
                "offer": "f5-big-ip-good", 
                "sku": "f5-bigip-virtual-edition-1g-good-hourly"
            }, 
            "good200mbps": {
                "offer": "f5-big-ip-good", 
                "sku": "f5-bigip-virtual-edition-200m-good-hourly"
            }, 
            "good25mbps": {
                "offer": "f5-big-ip-good", 
                "sku": "f5-bigip-virtual-edition-25m-good-hourly"
            }, 
            "perappveadvancedwaf200mbps": {
                "offer": "f5-big-ip-per-app-ve", 
                "sku": "f5-big-ip-per-app-ve-awf-200m-hourly"
            }, 
            "perappveadvancedwaf25mbps": {
                "offer": "f5-big-ip-per-app-ve", 
                "sku": "f5-big-ip-per-app-ve-awf-25m-hourly"
            }, 
            "perappveltm200mbps": {
                "offer": "f5-big-ip-per-app-ve", 
                "sku": "f5-big-ip-per-app-ve-ltm-200m-hourly"
            }, 
            "perappveltm25mbps": {
                "offer": "f5-big-ip-per-app-ve", 
                "sku": "f5-big-ip-per-app-ve-ltm-25m-hourly"
            },
            "alltwobootlocations": {
                "offer": "f5-big-ip-byol", 
                "sku": "f5-big-all-2slot-byol"
            },
            "ltmtwobootlocations": {
                "offer": "f5-big-ip-byol", 
                "sku": "f5-big-ltm-2slot-byol"
            },
            "allonebootlocation": {
                "offer": "f5-big-ip-byol", 
                "sku": "f5-big-all-1slot-byol"
            },
            "ltmonebootlocations": {
                "offer": "f5-big-ip-byol", 
                "sku": "f5-big-ltm-1slot-byol"
            }
        },    
        "bigIpNicPortMap": {
            "1": {
                "Port": "[parameters('bigIpVersion')]"
            }, 
            "2": {
                "Port": "443"
            }, 
            "3": {
                "Port": "443"
            }, 
            "4": {
                "Port": "443"
            }, 
            "5": {
                "Port": "443"
            }, 
            "6": {
                "Port": "443"
            }
        }, 
        "bigIpVersionPortMap": {
            "12.1.303000": {
                "Port": 443
            }, 
            "13.1.100000": {
                "Port": 8443
            }, 
            "443": {
                "Port": 443
            }, 
            "latest": {
                "Port": 8443
            }
        }, 
        "computeApiVersion": "2018-04-01", 
        "networkApiVersion": "2018-08-01", 
        "storageApiVersion": "2018-07-01", 
        "location": "[if(equals(parameters('AzureAvailabilityOptions'), 'Availability Zone'), variables('AzureAvailabilityZoneRegion'), resourceGroup().location)]",       
        "adminPasswordOrKey": "[replace(parameters('adminPasswordOrKey'),'\\n', '\n')]", 
        "linuxConfiguration": {
            "disablePasswordAuthentication": true, 
            "ssh": {
                "publicKeys": [
                    {
                        "keyData": "[variables('adminPasswordOrKey')]", 
                        "path": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]"
                    }
                ]
            }
        }, 
        "subscriptionID": "[subscription().subscriptionId]", 
        "resourceGroupName": "[resourceGroup().name]", 
        "singleQuote": "'", 
        "f5CloudLibsTag": "v4.6.0", 
        "f5CloudLibsAzureTag": "v2.6.0", 
        "f5NetworksTag": "v6.0.0.0", 
        "f5CloudIappsSdTag": "v2.2.3",
        "f5CloudIappsLoggerTag": "v1.0.0", 
        "f5AS3Tag": "v3.6.0", 
        "f5AS3Build": "f5-appsvcs-3.5.1-5.noarch.rpm", 
        "verifyHash": "[concat(variables('singleQuote'), 'cli script /Common/verifyHash {\nproc script::run {} {\n        if {[catch {\n            set hashes(f5-cloud-libs.tar.gz) 535059811324dbda9783df2c4f7ac8405acf6f198efd5696bc0d90f4f8f645b77c04efd42c3dc94261f0b92d76cbae87613412531968a5e646baf4177807b953\n            set hashes(f5-cloud-libs-aws.tar.gz) 076c969cbfff12efacce0879820262b7787c98645f1105667cc4927d4acfe2466ed64c777b6d35957f6df7ae266937dde42fef4c8b1f870020a366f7f910ffb5\n            set hashes(f5-cloud-libs-azure.tar.gz) eea34eb9bf1fc86702cc8d3adcd0cd4cd3e8ede0bad5d85ce55b7248aeb5726583b0314bd1ac9383dbfbf97c79d08d27a473539844de6972c9f6f5fea1a7b9aa\n            set hashes(f5-cloud-libs-gce.tar.gz) 605c13c0725dcf6ee96d24349aee68be59640c58fef16d42d69fe1b01fb2e59df14f2cd41f0718d21061b8fb52cdce57fcf6541ebc8610e54e0f7fe8e46d94cb\n            set hashes(f5-cloud-libs-openstack.tar.gz) 5c83fe6a93a6fceb5a2e8437b5ed8cc9faf4c1621bfc9e6a0779f6c2137b45eab8ae0e7ed745c8cf821b9371245ca29749ca0b7e5663949d77496b8728f4b0f9\n            set hashes(asm-policy-linux.tar.gz) 63b5c2a51ca09c43bd89af3773bbab87c71a6e7f6ad9410b229b4e0a1c483d46f1a9fff39d9944041b02ee9260724027414de592e99f4c2475415323e18a72e0\n            set hashes(f5.http.v1.2.0rc4.tmpl) 47c19a83ebfc7bd1e9e9c35f3424945ef8694aa437eedd17b6a387788d4db1396fefe445199b497064d76967b0d50238154190ca0bd73941298fc257df4dc034\n            set hashes(f5.http.v1.2.0rc6.tmpl) 811b14bffaab5ed0365f0106bb5ce5e4ec22385655ea3ac04de2a39bd9944f51e3714619dae7ca43662c956b5212228858f0592672a2579d4a87769186e2cbfe\n            set hashes(f5.http.v1.2.0rc7.tmpl) 21f413342e9a7a281a0f0e1301e745aa86af21a697d2e6fdc21dd279734936631e92f34bf1c2d2504c201f56ccd75c5c13baa2fe7653213689ec3c9e27dff77d\n            set hashes(f5.aws_advanced_ha.v1.3.0rc1.tmpl) 9e55149c010c1d395abdae3c3d2cb83ec13d31ed39424695e88680cf3ed5a013d626b326711d3d40ef2df46b72d414b4cb8e4f445ea0738dcbd25c4c843ac39d\n            set hashes(f5.aws_advanced_ha.v1.4.0rc1.tmpl) de068455257412a949f1eadccaee8506347e04fd69bfb645001b76f200127668e4a06be2bbb94e10fefc215cfc3665b07945e6d733cbe1a4fa1b88e881590396\n            set hashes(f5.aws_advanced_ha.v1.4.0rc2.tmpl) 6ab0bffc426df7d31913f9a474b1a07860435e366b07d77b32064acfb2952c1f207beaed77013a15e44d80d74f3253e7cf9fbbe12a90ec7128de6facd097d68f\n            set hashes(f5.aws_advanced_ha.v1.4.0rc3.tmpl) 2f2339b4bc3a23c9cfd42aae2a6de39ba0658366f25985de2ea53410a745f0f18eedc491b20f4a8dba8db48970096e2efdca7b8efffa1a83a78e5aadf218b134\n            set hashes(asm-policy.tar.gz) 2d39ec60d006d05d8a1567a1d8aae722419e8b062ad77d6d9a31652971e5e67bc4043d81671ba2a8b12dd229ea46d205144f75374ed4cae58cefa8f9ab6533e6\n            set hashes(deploy_waf.sh) 1a3a3c6274ab08a7dc2cb73aedc8d2b2a23cd9e0eb06a2e1534b3632f250f1d897056f219d5b35d3eed1207026e89989f754840fd92969c515ae4d829214fb74\n            set hashes(f5.policy_creator.tmpl) 06539e08d115efafe55aa507ecb4e443e83bdb1f5825a9514954ef6ca56d240ed00c7b5d67bd8f67b815ee9dd46451984701d058c89dae2434c89715d375a620\n            set hashes(f5.service_discovery.tmpl) 0c43a28d58ff8339891ef324763675c29275170f8984d39298a53f570385eef82bef6d5a273adebb5310fc529faffc9b225358ec8f65100115246915eff706fe\n            set hashes(f5.cloud_logger.v1.0.0.tmpl) 64a0ed3b5e32a037ba4e71d460385fe8b5e1aecc27dc0e8514b511863952e419a89f4a2a43326abb543bba9bc34376afa114ceda950d2c3bd08dab735ff5ad20\n            set hashes(f5-appsvcs-3.5.1-5.noarch.rpm) ba71c6e1c52d0c7077cdb25a58709b8fb7c37b34418a8338bbf67668339676d208c1a4fef4e5470c152aac84020b4ccb8074ce387de24be339711256c0fa78c8\n\n            set file_path [lindex $tmsh::argv 1]\n            set file_name [file tail $file_path]\n\n            if {![info exists hashes($file_name)]} {\n                tmsh::log err \"No hash found for $file_name\"\n                exit 1\n            }\n\n            set expected_hash $hashes($file_name)\n            set computed_hash [lindex [exec /usr/bin/openssl dgst -r -sha512 $file_path] 0]\n            if { $expected_hash eq $computed_hash } {\n                exit 0\n            }\n            tmsh::log err \"Hash does not match for $file_path\"\n            exit 1\n        }]} {\n            tmsh::log err {Unexpected error in verifyHash}\n            exit 1\n        }\n    }\n    script-signature hCr5O6FtvOkjRk8Vn1499YU57spPEMbLXCfkgLVsVcmBCXnHbRw6zTIZOJlGkwk7CyCTpcuVuTR1SiGsQKnclgcQFkEDP5rw98jyIwvKpfYXiLxPI2SPsyadom41FDPXy9+b4aOAJGRPcp5/HhRP7+ky7x6jI5SEF4ZFExN6BwWXn61D+MwYe2Ajhes/6wuZv+b9i9teckZLkyB54OAbEyEug3S66YK2Jg916Y5JLNhDn7JNoOPoyFvYlyuDOutcjFHiwjdSFEgcOx/dka/5aHtjKEiMWuCsuaZnhGKSHc/ZCTH8oht1qUi28Dz5W2Gq6hRE9Zt5S4HmS3JKu2wlfg==\n    signing-key /Common/f5-irule\n}', variables('singleQuote'))]", 
        "installCloudLibs": "[concat(variables('singleQuote'), '#!/bin/bash\necho about to execute\nchecks=0\nwhile [ $checks -lt 120 ]; do echo checking mcpd\n/usr/bin/tmsh -a show sys mcp-state field-fmt | grep -q running\nif [ $? == 0 ]; then\necho mcpd ready\nbreak\nfi\necho mcpd not ready yet\nlet checks=checks+1\nsleep 1\ndone\necho loading verifyHash script\n/usr/bin/tmsh load sys config merge file /config/verifyHash\nif [ $? != 0 ]; then\necho cannot validate signature of /config/verifyHash\nexit 1\nfi\necho loaded verifyHash\n\nconfig_loc=\"/config/cloud/\"\nhashed_file_list=\"${config_loc}f5-cloud-libs.tar.gz f5-appsvcs-3.5.1-5.noarch.rpm f5.service_discovery.tmpl f5.cloud_logger.v1.0.0.tmpl\"\nfor file in $hashed_file_list; do\necho \"verifying $file\"\n/usr/bin/tmsh run cli script verifyHash $file\nif [ $? != 0 ]; then\necho \"$file is not valid\"\nexit 1\nfi\necho \"verified $file\"\ndone\necho \"expanding $hashed_file_list\"\ntar xfz /config/cloud/f5-cloud-libs.tar.gz --warning=no-unknown-keyword -C /config/cloud/azure/node_modules/@f5devcentral\ntouch /config/cloud/cloudLibsReady', variables('singleQuote'))]", 
        "dnsLabel": "[toLower(parameters('dnsLabel'))]", 
        "splittedconsumptionModelAndImageName": "[split(parameters('consumptionModelAndImageName'),'_')]", 
        "imageNameToLower": "[toLower(variables('splittedconsumptionModelAndImageName')[1])]", 
        "consumptionModel": "[toLower(variables('splittedconsumptionModelAndImageName')[0])]", 
        "skuToUse": "[variables('ConsumptionImageMap')[variables('imageNameToLower')]['sku']]", 
        "offerToUse": "[variables('ConsumptionImageMap')[variables('imageNameToLower')]['offer']]", 
        "imagePlan": {
            "name": "[variables('skuToUse')]", 
            "product": "[variables('offerToUse')]", 
            "publisher": "f5-networks"
        }, 
        "imageReference": {
            "offer": "[variables('offerToUse')]", 
            "publisher": "f5-networks", 
            "sku": "[variables('skuToUse')]", 
            "version": "[parameters('bigIpVersion')]"
        }, 
        "bigIpNicPortValue": "[variables('bigIpNicPortMap')['3'].Port]", 
        "bigIpMgmtPort": "[variables('bigIpVersionPortMap')[variables('bigIpNicPortValue')].Port]", 
        "instanceName": "[toLower(parameters('instanceName'))]", 
        "availabilitySetName": "[concat(variables('dnsLabel'), '-avset')]", 
        "availabilityZoneNumberForBigIpMember1": "[parameters('AzureAvailabilityZoneForBigIpMember1')]",
        "availabilityZoneNumberForBigIpMember2": "[parameters('AzureAvailabilityZoneForBigIpMember2')]",
        "availabilityZoneNumberForBigIpMember3": "[parameters('AzureAvailabilityZoneForBigIpMember3')]",
        "availabilityZoneNumberForPublicIpAddresses": "[tolower(parameters('AzureAvailabilityZoneForPublicIpAddresses'))]",
        "AzureAvailabilityZoneRegion": "[parameters('AzureAvailabilityZoneRegion')]",
        "virtualNetworkName": "[concat(variables('dnsLabel'), '-vnet')]", 
        "vnetId": "[resourceId('Microsoft.Network/virtualNetworks', variables('virtualNetworkName'))]", 
        "vnetAddressPrefix": "[concat(parameters('vnetAddressPrefix'),'.0.0/16')]", 
        "publicIPAddressType": "Static", 
        "mgmtPublicIPAddressName": "[concat(variables('dnsLabel'), '-mgmt-pip')]",
        "mgmtPublicIPAddressId": "[resourceId('Microsoft.Network/publicIPAddresses', variables('mgmtPublicIPAddressName'))]",  
        "mgmtNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',concat(variables('dnsLabel'),'-mgmt-nsg'))]", 
        "mgmtNicName": "[concat(variables('dnsLabel'), '-mgmt')]", 
        "mgmtNicID": "[resourceId('Microsoft.Network/NetworkInterfaces', variables('mgmtNicName'))]", 
        "mgmtSubnetName": "mgmt", 
        "mgmtSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('mgmtSubnetName'))]", 
        "mgmtSubnetPrefix": "[concat(parameters('vnetAddressPrefix'), '.1.0/24')]", 
        "mgmtSubnetPrivateAddress": "[concat(parameters('vnetAddressPrefix'), '.1.4')]", 
        "mgmtSubnetPrivateAddress1": "[concat(parameters('vnetAddressPrefix'), '.1.5')]",
        "mgmtSubnetPrivateAddress2": "[concat(parameters('vnetAddressPrefix'), '.1.6')]",
        "extSelfPublicIpAddressNamePrefix": "[concat(variables('dnsLabel'), '-self-pip')]", 
        "extSelfPublicIpAddressIdPrefix": "[resourceId('Microsoft.Network/publicIPAddresses', variables('extSelfPublicIpAddressNamePrefix'))]", 
        "extpublicIPAddressNamePrefix": "[concat(variables('dnsLabel'), '-ext-pip')]", 
        "extPublicIPAddressIdPrefix": "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), resourceId('Microsoft.Network/publicIPAddresses', variables('extPublicIPAddressNamePrefix')), resourceId('Microsoft.Network/publicIPAddresses', concat(variables('extPublicIPAddressNamePrefix'), '-az',variables('availabilityZoneNumberForPublicIpAddresses'))))]", 
        "extNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups/',concat(variables('dnsLabel'),'-ext-nsg'))]", 
        "extNicName": "[concat(variables('dnsLabel'), '-ext')]", 
        "extSubnetName": "external", 
        "extSubnetPrefix": "[concat(parameters('vnetAddressPrefix'), '.2.0/24')]", 
        "extSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('extsubnetName'))]", 
        "extSubnetPrivateAddress": "[concat(parameters('vnetAddressPrefix'), '.2.4')]", 
        "extSubnetPrivateAddress1": "[concat(parameters('vnetAddressPrefix'), '.2.5')]",
        "extSubnetPrivateAddress2": "[concat(parameters('vnetAddressPrefix'), '.2.6')]",
        "extSubnetPrivateAddressPrefix": "[concat(parameters('vnetAddressPrefix'), '.2.')]", 
        "intNicName": "[concat(variables('dnsLabel'), '-int')]", 
        "intSubnetName": "internal", 
        "intSubnetPrefix": "[concat(parameters('vnetAddressPrefix'), '.3.0/24')]", 
        "intSubnetId": "[concat(variables('vnetId'), '/subnets/', variables('intsubnetName'))]", 
        "intSubnetPrivateAddress": "[concat(parameters('vnetAddressPrefix'), '.3.4')]", 
        "intSubnetPrivateAddress1": "[concat(parameters('vnetAddressPrefix'), '.3.5')]", 
        "intSubnetPrivateAddress2": "[concat(parameters('vnetAddressPrefix'), '.3.10')]", 
        "intSubnetPrivateAddress3": "[concat(parameters('vnetAddressPrefix'), '.3.11')]", 
        "intSubnetPrivateAddress4": "[concat(parameters('vnetAddressPrefix'), '.3.12')]", 
        "intSubnetPrivateAddress5": "[concat(parameters('vnetAddressPrefix'), '.3.13')]",
        "internalLoadBalancerAddress": "[concat(parameters('vnetAddressPrefix'), '.3.50')]", 
        "numberOfExternalIps": "[parameters('numberOfExternalIps')]", 
        "mgmtRouteGw": "[concat(parameters('vnetAddressPrefix'), '.1.1')]", 
        "tmmRouteGw": "[concat(parameters('vnetAddressPrefix'), '.2.1')]", 
        "routeCmdArray": {
            "12.1.303000": "[concat('tmsh create sys management-route waagent_route network 168.63.129.16/32 gateway ', variables('mgmtRouteGw'), '; tmsh save sys config')]", 
            "13.1.100000": "route", 
            "latest": "route"
        }, 
        "backEndAddressPoolArray": [
            {
                "id": "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), concat(variables('extLbId'), '/backendAddressPools/', 'loadBalancerBackEnd'), concat(variables('extLbId'), '-az', variables('availabilityZoneNumberForPublicIpAddresses'), '/backendAddressPools/', 'loadBalancerBackEnd'))]"
            }, 
            {
                "id": "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), concat(variables('intLbId'), '/backendAddressPools/', 'loadBalancerBackEnd'), concat(variables('intLbId'), '-az', variables('availabilityZoneNumberForPublicIpAddresses'), '/backendAddressPools/', 'loadBalancerBackEnd'))]"
            } 
        ], 
        "failoverCmdArray": {
            "No": {
                "first": "[concat('tmsh modify cm device ', concat(variables('instanceName'), '0.', variables('location'), '.cloudapp.azure.com'), ' unicast-address none')]", 
                "second": "[concat('tmsh modify cm device ', concat(variables('instanceName'), '1.', variables('location'), '.cloudapp.azure.com'), ' unicast-address none')]",
                "third": "[concat('tmsh modify cm device ', concat(variables('instanceName'), '2.', variables('location'), '.cloudapp.azure.com'), ' unicast-address none')]"

            }, 
            "Yes": {
                "first": "[concat('tmsh modify cm device ', concat(variables('instanceName'), '0.', variables('location'), '.cloudapp.azure.com'), ' unicast-address { { ip ', variables('intSubnetPrivateAddress'), ' port 1026 } } mirror-ip ', variables('intSubnetPrivateAddress'))]", 
                "second": "[concat('tmsh modify cm device ', concat(variables('instanceName'), '1.', variables('location'), '.cloudapp.azure.com'), ' unicast-address { { ip ', variables('intSubnetPrivateAddress1'), ' port 1026 } } mirror-ip ', variables('intSubnetPrivateAddress1'))]",
                "third": "[concat('tmsh modify cm device ', concat(variables('instanceName'), '2.', variables('location'), '.cloudapp.azure.com'), ' unicast-address { { ip ', variables('intSubnetPrivateAddress2'), ' port 1026 } } mirror-ip ', variables('intSubnetPrivateAddress2'))]"
            }
        }, 
        "externalLoadBalancerName": "[concat(variables('dnsLabel'),'-ext-alb')]", 
        "extLbId": "[resourceId('Microsoft.Network/loadBalancers',variables('externalLoadBalancerName'))]", 
        "internalLoadBalancerName": "[concat(variables('dnsLabel'),'-int-ilb')]", 
        "intLbId": "[resourceId('Microsoft.Network/loadBalancers',variables('internalLoadBalancerName'))]", 
        "tagValues": "[parameters('tagValues')]", 
        "newDataStorageAccountName": "[concat(uniqueString(variables('dnsLabel'), resourceGroup().id, deployment().name), 'data000')]", 
        "dataStorageAccountType": "Standard_LRS", 
        "deploymentId": "[concat(variables('subscriptionId'), resourceGroup().id, deployment().name, variables('dnsLabel'))]", 
        "allowUsageAnalytics": {
            "No": {
                "hashCmd": "echo AllowUsageAnalytics:No", 
                "metricsCmd": ""
            }, 
            "Yes": {
                "hashCmd": "[concat('custId=`echo \"', variables('subscriptionId'), '\"|sha512sum|cut -d \" \" -f 1`; deployId=`echo \"', variables('deploymentId'), '\"|sha512sum|cut -d \" \" -f 1`')]", 
                "metricsCmd": "[concat(' --metrics customerId:${custId},deploymentId:${deployId},templateName:failover-lb_3nic-new-stack-supported,templateVersion:6.0.0.0,region:', variables('location'), ',bigIpVersion:', parameters('bigIpVersion') ,',licenseType:', variables('consumptionModel'), ',cloudLibsVersion:', variables('f5CloudLibsTag'), ',cloudName:azure')]"
            }
        }, 
        "customImage": "[replace(parameters('customImage'), 'OPTIONAL', '')]", 
        "useCustomImage": "[not(empty(variables('customImage')))]", 
        "createNewCustomImage": "[contains(variables('customImage'), 'https://')]", 
        "newCustomImageName": "[concat(variables('dnsLabel'), 'image')]", 
        "storageProfileArray": {
            "customImage": {
                "imageReference": {
                    "id": "[if(variables('createNewCustomImage'), resourceId('Microsoft.Compute/images', variables('newCustomImageName')), variables('customImage'))]"
                }
            }, 
            "platformImage": {
                "imageReference": "[variables('imageReference')]", 
                "osDisk": {
                    "createOption": "FromImage"
                }
            }
        }, 
        "premiumInstanceArray": [
            "Standard_DS2", 
            "Standard_DS3", 
            "Standard_DS4", 
            "Standard_DS11", 
            "Standard_DS12", 
            "Standard_DS13", 
            "Standard_DS14", 
            "Standard_DS2_v2", 
            "Standard_DS3_v2", 
            "Standard_DS4_v2", 
            "Standard_DS5_v2", 
            "Standard_DS11_v2", 
            "Standard_DS12_v2", 
            "Standard_DS13_v2", 
            "Standard_DS14_v2", 
            "Standard_DS15_v2", 
            "Standard_F2S", 
            "Standard_F4S", 
            "Standard_F8S", 
            "Standard_F16S", 
            "Standard_GS2", 
            "Standard_GS3", 
            "Standard_GS4", 
            "Standard_GS5"
        ], 
        "customConfig": "### START (INPUT) CUSTOM CONFIGURATION HERE\n", 
        "installCustomConfig": "[concat(variables('singleQuote'), '#!/bin/bash\n', variables('customConfig'), variables('singleQuote'))]",
        "CommandToExecuteArray": {
            "COMMON": {
                "Header": "[concat('function cp_logs() { cd /var/lib/waagent/custom-script/download && cp `ls -r | head -1`/std* /var/log/cloud/azure; cd /var/log/cloud/azure && cat stdout stderr > install.log; }; CLOUD_LIB_DIR=/config/cloud/azure/node_modules/@f5devcentral; mkdir -p $CLOUD_LIB_DIR && cp f5-cloud-libs.tar.gz* /config/cloud; mkdir -p /var/config/rest/downloads && cp ', variables('f5AS3Build'), ' /var/config/rest/downloads; mkdir -p /var/log/cloud/azure; /usr/bin/install -m 400 /dev/null /config/cloud/.passwd; /usr/bin/install -b -m 755 /dev/null /config/verifyHash; /usr/bin/install -b -m 755 /dev/null /config/installCloudLibs.sh; IFS=', variables('singleQuote'), '%', variables('singleQuote'), '; echo -e ', variables('verifyHash'), ' >> /config/verifyHash; echo -e ', variables('installCloudLibs'), ' >> /config/installCloudLibs.sh; echo -e ', variables('installCustomConfig'), ' >> /config/customConfig.sh; unset IFS; bash /config/installCloudLibs.sh; source $CLOUD_LIB_DIR/f5-cloud-libs/scripts/util.sh; encrypt_secret ', variables('singleQuote'), variables('adminPasswordOrKey'), variables('singleQuote'), ' \"/config/cloud/.passwd\" true; $CLOUD_LIB_DIR/f5-cloud-libs/scripts/createUser.sh --user svc_user --password-file /config/cloud/.passwd --password-encrypted;', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].hashCmd, ';')]",
                "Trailer": "[concat(' if [[ $? == 0 ]]; then tmsh load sys application template f5.service_discovery.tmpl; tmsh load sys application template f5.cloud_logger.v1.0.0.tmpl; ', variables('routeCmdArray')[parameters('bigIpVersion')], '; if [ -f /config/cloud/.bigIqPasswd ]; then rm -f /config/cloud/.bigIqPasswd; fi; bash /config/customConfig.sh; $(cp_logs); else $(cp_logs); exit 1; fi', '; if grep -i \"PUT failed\" /var/log/waagent.log -q; then echo \"Killing waagent exthandler, daemon should restart it\"; pkill -f \"python -u /usr/sbin/waagent -run-exthandlers\"; fi')]"
                    },
            "BYOL": {
               "Node0": {
                    "Header": "[concat(' /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/onboard.js --output /var/log/cloud/azure/onboard.log --signal ONBOARD_DONE --log-level info --cloud azure --install-ilx-package file:///var/config/rest/downloads/', variables('f5AS3Build'), ' --host ', variables('mgmtSubnetPrivateAddress'), ' --port ', variables('bigIpMgmtPort'), ' --ssl-port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --hostname ', concat(variables('instanceName'), '0.', variables('location'), '.cloudapp.azure.com'), ' --license ', parameters('licenseKey1'), ' --ntp ', parameters('ntpServer'), ' --tz ', parameters('timeZone'), ' --db tmm.maxremoteloglength:2048', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].metricsCmd, ' --module ltm:nominal; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/network.js --output /var/log/cloud/azure/network.log --wait-for ONBOARD_DONE --host ', variables('mgmtSubnetPrivateAddress'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --default-gw ', variables('tmmRouteGw'), ' --vlan name:external,nic:1.1 --vlan name:internal,nic:1.2 --self-ip name:self_2nic,address:', variables('extSubnetPrivateAddress'),  ',vlan:external --self-ip name:self_3nic,address:', variables('intSubnetPrivateAddress'),  ',vlan:internal --log-level info; ', variables('failoverCmdArray')[parameters('enableNetworkFailover')].first, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/cluster.js --output /var/log/cloud/azure/cluster.log --log-level info --host ', variables('mgmtSubnetPrivateAddress'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --config-sync-ip ', variables('intSubnetPrivateAddress'), ' --create-group --device-group Sync --sync-type sync-failover --device ', concat(variables('instanceName'), '0.', variables('location'), '.cloudapp.azure.com'), ' --network-failover --auto-sync --save-on-auto-sync')]",
                    "Trailer":  ""
                        },
               "Node1": {
                    "Header": "[concat(' /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/onboard.js --output /var/log/cloud/azure/onboard.log --signal ONBOARD_DONE --log-level info --cloud azure --install-ilx-package file:///var/config/rest/downloads/', variables('f5AS3Build'), ' --host ', variables('mgmtSubnetPrivateAddress1'), ' --port ', variables('bigIpMgmtPort'), ' --ssl-port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --hostname ', concat(variables('instanceName'), '1.', variables('location'), '.cloudapp.azure.com'), ' --license ', parameters('licenseKey2'), ' --ntp ', parameters('ntpServer'), ' --tz ', parameters('timeZone'), ' --db tmm.maxremoteloglength:2048', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].metricsCmd, ' --module ltm:nominal; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/network.js --output /var/log/cloud/azure/network.log --wait-for ONBOARD_DONE --host ', variables('mgmtSubnetPrivateAddress1'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --default-gw ', variables('tmmRouteGw'), ' --vlan name:external,nic:1.1 --vlan name:internal,nic:1.2 --self-ip name:self_2nic,address:', variables('extSubnetPrivateAddress1'),  ',vlan:external --self-ip name:self_3nic,address:', variables('intSubnetPrivateAddress1'),  ',vlan:internal --log-level info; ', variables('failoverCmdArray')[parameters('enableNetworkFailover')].second, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/cluster.js --output /var/log/cloud/azure/cluster.log --log-level info --host ', variables('mgmtSubnetPrivateAddress1'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --config-sync-ip ', variables('intSubnetPrivateAddress1'), ' --join-group --device-group Sync --sync --remote-host ', variables('mgmtSubnetPrivateAddress'), ' --remote-user svc_user --remote-password-url file:///config/cloud/.passwd')]",
                    "Trailer":  ""
                        },
                "Node2": {
                    "Header": "[concat(' /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/onboard.js --output /var/log/cloud/azure/onboard.log --signal ONBOARD_DONE --log-level info --cloud azure --install-ilx-package file:///var/config/rest/downloads/', variables('f5AS3Build'), ' --host ', variables('mgmtSubnetPrivateAddress2'), ' --port ', variables('bigIpMgmtPort'), ' --ssl-port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --hostname ', concat(variables('instanceName'), '2.', variables('location'), '.cloudapp.azure.com'), ' --license ', parameters('licenseKey3'), ' --ntp ', parameters('ntpServer'), ' --tz ', parameters('timeZone'), ' --db tmm.maxremoteloglength:2048', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].metricsCmd, ' --module ltm:nominal; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/network.js --output /var/log/cloud/azure/network.log --wait-for ONBOARD_DONE --host ', variables('mgmtSubnetPrivateAddress2'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --default-gw ', variables('tmmRouteGw'), ' --vlan name:external,nic:1.1 --vlan name:internal,nic:1.2 --self-ip name:self_2nic,address:', variables('extSubnetPrivateAddress2'),  ',vlan:external --self-ip name:self_3nic,address:', variables('intSubnetPrivateAddress2'),  ',vlan:internal --log-level info; ', variables('failoverCmdArray')[parameters('enableNetworkFailover')].third, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/cluster.js --output /var/log/cloud/azure/cluster.log --log-level info --host ', variables('mgmtSubnetPrivateAddress2'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --config-sync-ip ', variables('intSubnetPrivateAddress2'), ' --join-group --device-group Sync --sync --remote-host ', variables('mgmtSubnetPrivateAddress'), ' --remote-user svc_user --remote-password-url file:///config/cloud/.passwd')]",
                    "Trailer":  ""
                        }
                  },
            "BIG-IQ": {
                "Node0": {
                    "Header": "[concat(' /usr/bin/install -m 400 /dev/null /config/cloud/.bigIqPasswd; encrypt_secret ', variables('singleQuote'), parameters('bigIqPassword'), variables('singleQuote'), ' \"/config/cloud/.bigIqPasswd\"; ', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].hashCmd, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/onboard.js --output /var/log/cloud/azure/onboard.log --signal ONBOARD_DONE --log-level info --cloud azure --install-ilx-package file:///var/config/rest/downloads/', variables('f5AS3Build'), ' --host ', variables('mgmtSubnetPrivateAddress'), ' --port ', variables('bigIpMgmtPort'), ' --ssl-port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --hostname ', concat(variables('instanceName'), '0.', variables('location'), '.cloudapp.azure.com'), ' --license-pool --big-iq-host ', parameters('bigIqAddress'), ' --big-iq-user ', parameters('bigIqUsername'), ' --big-iq-password-uri file:///config/cloud/.bigIqPasswd --big-iq-password-encrypted --license-pool-name ', parameters('bigIqLicensePoolName'), ' $(format_args sku-keyword-1:', parameters('bigIqLicenseSkuKeyWord1'), ',unit-of-measure:', parameters('bigIqLicenseUnitOfMeasure'), ') --big-ip-mgmt-address ')]",
                    "Trailer": "[concat(' --ntp ', parameters('ntpServer'), ' --tz ', parameters('timeZone'), ' --db tmm.maxremoteloglength:2048', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].metricsCmd, ' --module ltm:nominal; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/network.js --output /var/log/cloud/azure/network.log --wait-for ONBOARD_DONE --host ', variables('mgmtSubnetPrivateAddress'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --default-gw ', variables('tmmRouteGw'), ' --vlan name:external,nic:1.1 --vlan name:internal,nic:1.2 --self-ip name:self_2nic,address:', variables('extSubnetPrivateAddress'),  ',vlan:external --self-ip name:self_3nic,address:', variables('intSubnetPrivateAddress'),  ',vlan:internal --log-level info; ', variables('failoverCmdArray')[parameters('enableNetworkFailover')].first, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/cluster.js --output /var/log/cloud/azure/cluster.log --log-level info --host ', variables('mgmtSubnetPrivateAddress'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --config-sync-ip ', variables('intSubnetPrivateAddress'), ' --create-group --device-group Sync --sync-type sync-failover --device ', concat(variables('instanceName'), '0.', variables('location'), '.cloudapp.azure.com'), ' --network-failover --auto-sync --save-on-auto-sync')]"      
                         }, 
                "Node1": {
                    "Header": "[concat(' /usr/bin/install -m 400 /dev/null /config/cloud/.bigIqPasswd; encrypt_secret ', variables('singleQuote'), parameters('bigIqPassword'), variables('singleQuote'), ' \"/config/cloud/.bigIqPasswd\"; ', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].hashCmd, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/onboard.js --output /var/log/cloud/azure/onboard.log --signal ONBOARD_DONE --log-level info --cloud azure --install-ilx-package file:///var/config/rest/downloads/', variables('f5AS3Build'), ' --host ', variables('mgmtSubnetPrivateAddress1'), ' --port ', variables('bigIpMgmtPort'), ' --ssl-port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --hostname ', concat(variables('instanceName'), '1.', variables('location'), '.cloudapp.azure.com'), ' --license-pool --big-iq-host ', parameters('bigIqAddress'), ' --big-iq-user ', parameters('bigIqUsername'), ' --big-iq-password-uri file:///config/cloud/.bigIqPasswd --big-iq-password-encrypted --license-pool-name ', parameters('bigIqLicensePoolName'), ' $(format_args sku-keyword-1:', parameters('bigIqLicenseSkuKeyWord1'), ',unit-of-measure:', parameters('bigIqLicenseUnitOfMeasure'), ') --big-ip-mgmt-address ')]",
                    "Trailer": "[concat(' --ntp ', parameters('ntpServer'), ' --tz ', parameters('timeZone'), ' --db tmm.maxremoteloglength:2048', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].metricsCmd, ' --module ltm:nominal; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/network.js --output /var/log/cloud/azure/network.log --wait-for ONBOARD_DONE --host ', variables('mgmtSubnetPrivateAddress1'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --default-gw ', variables('tmmRouteGw'), ' --vlan name:external,nic:1.1 --vlan name:internal,nic:1.2 --self-ip name:self_2nic,address:', variables('extSubnetPrivateAddress1'),  ',vlan:external --self-ip name:self_3nic,address:', variables('intSubnetPrivateAddress1'),  ',vlan:internal --log-level info; ', variables('failoverCmdArray')[parameters('enableNetworkFailover')].second, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/cluster.js --output /var/log/cloud/azure/cluster.log --log-level info --host ', variables('mgmtSubnetPrivateAddress1'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --config-sync-ip ', variables('intSubnetPrivateAddress1'), ' --join-group --device-group Sync --sync --remote-host ', variables('mgmtSubnetPrivateAddress'), ' --remote-user svc_user --remote-password-url file:///config/cloud/.passwd')]"
                        },                  
                "Node2": {
                    "Header": "[concat(' /usr/bin/install -m 400 /dev/null /config/cloud/.bigIqPasswd; encrypt_secret ', variables('singleQuote'), parameters('bigIqPassword'), variables('singleQuote'), ' \"/config/cloud/.bigIqPasswd\"; ', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].hashCmd, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/onboard.js --output /var/log/cloud/azure/onboard.log --signal ONBOARD_DONE --log-level info --cloud azure --install-ilx-package file:///var/config/rest/downloads/', variables('f5AS3Build'), ' --host ', variables('mgmtSubnetPrivateAddress2'), ' --port ', variables('bigIpMgmtPort'), ' --ssl-port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --hostname ', concat(variables('instanceName'), '2.', variables('location'), '.cloudapp.azure.com'), ' --license-pool --big-iq-host ', parameters('bigIqAddress'), ' --big-iq-user ', parameters('bigIqUsername'), ' --big-iq-password-uri file:///config/cloud/.bigIqPasswd --big-iq-password-encrypted --license-pool-name ', parameters('bigIqLicensePoolName'), ' $(format_args sku-keyword-1:', parameters('bigIqLicenseSkuKeyWord1'), ',unit-of-measure:', parameters('bigIqLicenseUnitOfMeasure'), ') --big-ip-mgmt-address ')]",
                    "Trailer": "[concat(' --ntp ', parameters('ntpServer'), ' --tz ', parameters('timeZone'), ' --db tmm.maxremoteloglength:2048', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].metricsCmd, ' --module ltm:nominal; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/network.js --output /var/log/cloud/azure/network.log --wait-for ONBOARD_DONE --host ', variables('mgmtSubnetPrivateAddress2'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --default-gw ', variables('tmmRouteGw'), ' --vlan name:external,nic:1.1 --vlan name:internal,nic:1.2 --self-ip name:self_2nic,address:', variables('extSubnetPrivateAddress2'),  ',vlan:external --self-ip name:self_3nic,address:', variables('intSubnetPrivateAddress2'),  ',vlan:internal --log-level info; ', variables('failoverCmdArray')[parameters('enableNetworkFailover')].second, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/cluster.js --output /var/log/cloud/azure/cluster.log --log-level info --host ', variables('mgmtSubnetPrivateAddress2'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --config-sync-ip ', variables('intSubnetPrivateAddress2'), ' --join-group --device-group Sync --sync --remote-host ', variables('mgmtSubnetPrivateAddress'), ' --remote-user svc_user --remote-password-url file:///config/cloud/.passwd')]"
                        }                  
                    },
            "PAYG": {
                "Node0": {
                    "Header": "[concat(' /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/onboard.js --output /var/log/cloud/azure/onboard.log --signal ONBOARD_DONE --log-level info --cloud azure --install-ilx-package file:///var/config/rest/downloads/', variables('f5AS3Build'), ' --host ', variables('mgmtSubnetPrivateAddress'), ' --port ', variables('bigIpMgmtPort'), ' --ssl-port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --hostname ', concat(variables('instanceName'), '0.', variables('location'), '.cloudapp.azure.com'),  ' --ntp ', parameters('ntpServer'), ' --tz ', parameters('timeZone'), ' --db tmm.maxremoteloglength:2048', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].metricsCmd, ' --module ltm:nominal; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/network.js --output /var/log/cloud/azure/network.log --wait-for ONBOARD_DONE --host ', variables('mgmtSubnetPrivateAddress'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --default-gw ', variables('tmmRouteGw'), ' --vlan name:external,nic:1.1 --vlan name:internal,nic:1.2 --self-ip name:self_2nic,address:', variables('extSubnetPrivateAddress'),  ',vlan:external --self-ip name:self_3nic,address:', variables('intSubnetPrivateAddress'),  ',vlan:internal --log-level info; ', variables('failoverCmdArray')[parameters('enableNetworkFailover')].first, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/cluster.js --output /var/log/cloud/azure/cluster.log --log-level info --host ', variables('mgmtSubnetPrivateAddress'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --config-sync-ip ', variables('intSubnetPrivateAddress'), ' --create-group --device-group Sync --sync-type sync-failover --device ', concat(variables('instanceName'), '0.', variables('location'), '.cloudapp.azure.com'), ' --network-failover --auto-sync --save-on-auto-sync')]",
                    "Trailer": ""
                        },
                 "Node1": {
                    "Header": "[concat(' /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/onboard.js --output /var/log/cloud/azure/onboard.log --signal ONBOARD_DONE --log-level info --cloud azure --install-ilx-package file:///var/config/rest/downloads/', variables('f5AS3Build'), ' --host ', variables('mgmtSubnetPrivateAddress1'), ' --port ', variables('bigIpMgmtPort'), ' --ssl-port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --hostname ', concat(variables('instanceName'), '1.', variables('location'), '.cloudapp.azure.com'),  ' --ntp ', parameters('ntpServer'), ' --tz ', parameters('timeZone'), ' --db tmm.maxremoteloglength:2048', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].metricsCmd, ' --module ltm:nominal; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/network.js --output /var/log/cloud/azure/network.log --wait-for ONBOARD_DONE --host ', variables('mgmtSubnetPrivateAddress1'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --default-gw ', variables('tmmRouteGw'), ' --vlan name:external,nic:1.1 --vlan name:internal,nic:1.2 --self-ip name:self_2nic,address:', variables('extSubnetPrivateAddress1'),  ',vlan:external --self-ip name:self_3nic,address:', variables('intSubnetPrivateAddress1'),  ',vlan:internal --log-level info; ', variables('failoverCmdArray')[parameters('enableNetworkFailover')].second, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/cluster.js --output /var/log/cloud/azure/cluster.log --log-level info --host ', variables('mgmtSubnetPrivateAddress1'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --config-sync-ip ', variables('intSubnetPrivateAddress1'), ' --join-group --device-group Sync --sync --remote-host ', variables('mgmtSubnetPrivateAddress'), ' --remote-user svc_user --remote-password-url file:///config/cloud/.passwd')]",
                    "Trailer": ""
                        },
                 "Node2": {
                    "Header": "[concat(' /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/onboard.js --output /var/log/cloud/azure/onboard.log --signal ONBOARD_DONE --log-level info --cloud azure --install-ilx-package file:///var/config/rest/downloads/', variables('f5AS3Build'), ' --host ', variables('mgmtSubnetPrivateAddress2'), ' --port ', variables('bigIpMgmtPort'), ' --ssl-port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --hostname ', concat(variables('instanceName'), '2.', variables('location'), '.cloudapp.azure.com'),  ' --ntp ', parameters('ntpServer'), ' --tz ', parameters('timeZone'), ' --db tmm.maxremoteloglength:2048', variables('allowUsageAnalytics')[parameters('allowUsageAnalytics')].metricsCmd, ' --module ltm:nominal; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/network.js --output /var/log/cloud/azure/network.log --wait-for ONBOARD_DONE --host ', variables('mgmtSubnetPrivateAddress2'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --default-gw ', variables('tmmRouteGw'), ' --vlan name:external,nic:1.1 --vlan name:internal,nic:1.2 --self-ip name:self_2nic,address:', variables('extSubnetPrivateAddress2'),  ',vlan:external --self-ip name:self_3nic,address:', variables('intSubnetPrivateAddress2'),  ',vlan:internal --log-level info; ', variables('failoverCmdArray')[parameters('enableNetworkFailover')].third, '; /usr/bin/f5-rest-node $CLOUD_LIB_DIR/f5-cloud-libs/scripts/cluster.js --output /var/log/cloud/azure/cluster.log --log-level info --host ', variables('mgmtSubnetPrivateAddress2'), ' --port ', variables('bigIpMgmtPort'), ' -u svc_user --password-url file:///config/cloud/.passwd --password-encrypted --config-sync-ip ', variables('intSubnetPrivateAddress2'), ' --join-group --device-group Sync --sync --remote-host ', variables('mgmtSubnetPrivateAddress'), ' --remote-user svc_user --remote-password-url file:///config/cloud/.passwd')]",
                    "Trailer": ""
                        }
                    }
                }
        }, 
    "resources": [
        {
            "condition": "[and(equals(parameters('AzureAvailabilityOptions'), 'Availability Zone'), not(equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')))]",
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]",
            "zones": ["[variables('availabilityZoneNumberForPublicIpAddresses')]"],
            "sku": {
                "name": "Standard"
            },
            "name": "[concat(variables('mgmtPublicIPAddressName'), concat('-az',variables('availabilityZoneNumberForPublicIpAddresses')), 0)]",  
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('dnsLabel'), variables('availabilityZoneNumberForPublicIpAddresses'), '-0')]"
                }, 
                "idleTimeoutInMinutes": 30, 
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/publicIPAddresses"
        }, 
        {
            "condition": "[or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant'))]",
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]", 
            "sku": {
                "name": "[if(equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant'), 'Standard', 'Basic')]"
            },
            "name": "[concat(variables('mgmtPublicIPAddressName'), 0)]", 
             "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('dnsLabel'), '-0')]"
                }, 
                "idleTimeoutInMinutes": 30, 
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/publicIPAddresses"
        }, 
        {
            "condition": "[and(equals(parameters('AzureAvailabilityOptions'), 'Availability Zone'), not(equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')))]",
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]",
            "zones": ["[variables('availabilityZoneNumberForPublicIpAddresses')]"],
            "sku": {
                "name": "Standard"
            },
            "name": "[concat(variables('mgmtPublicIPAddressName'), concat('-az',variables('availabilityZoneNumberForPublicIpAddresses')), 1)]", 
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('dnsLabel'), variables('availabilityZoneNumberForPublicIpAddresses'), '-1')]"
                }, 
                "idleTimeoutInMinutes": 30, 
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/publicIPAddresses"
        }, 
        {
            "condition": "[or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant'))]",
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]", 
            "sku": {
                "name": "[if(equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant'), 'Standard', 'Basic')]"
            },
            "name": "[concat(variables('mgmtPublicIPAddressName'), 1)]", 
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('dnsLabel'), '-1')]"
                }, 
                "idleTimeoutInMinutes": 30, 
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/publicIPAddresses"
        },
        {
            "condition": "[and(equals(parameters('AzureAvailabilityOptions'), 'Availability Zone'), not(equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), equals(parameters('BIGIPAvailabilityType'), 'Cluster_with_3_members'))]",
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]",
            "zones": ["[variables('availabilityZoneNumberForPublicIpAddresses')]"],
            "sku": {
                "name": "Standard"
            },
            "name": "[concat(variables('mgmtPublicIPAddressName'), concat('-az',variables('availabilityZoneNumberForPublicIpAddresses')), 2)]", 
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('dnsLabel'), variables('availabilityZoneNumberForPublicIpAddresses'), '-2')]"
                }, 
                "idleTimeoutInMinutes": 30, 
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/publicIPAddresses"
        }, 
        {
            "condition": "[and(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), equals(parameters('BIGIPAvailabilityType'), 'Cluster_with_3_members'))]",
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]", 
            "sku": {
                "name": "[if(equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant'), 'Standard', 'Basic')]"
            },
            "name": "[concat(variables('mgmtPublicIPAddressName'), 2)]", 
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('dnsLabel'), '-2')]"
                }, 
                "idleTimeoutInMinutes": 30, 
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/publicIPAddresses"
        },
        {
            "condition": "[and(equals(parameters('AzureAvailabilityOptions'), 'Availability Zone'), not(equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')))]",
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]",
            "zones": ["[variables('availabilityZoneNumberForPublicIpAddresses')]"], 
            "sku": {
                "name": "Standard"
            },
            "name": "[concat(variables('extSelfPublicIpAddressNamePrefix'),concat('-az',variables('availabilityZoneNumberForPublicIpAddresses')), '0')]", 
            "properties": {
                "idleTimeoutInMinutes": 30, 
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/publicIPAddresses"
        },
        {
            "condition": "[or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant'))]",
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]", 
            "sku": {
                "name": "[if(equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant'), 'Standard', 'Basic')]"           },
            "name": "[concat(variables('extSelfPublicIpAddressNamePrefix'), '0')]", 
            "properties": {
                "idleTimeoutInMinutes": 30, 
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/publicIPAddresses"
        }, 
        {
            "condition": "[and(equals(parameters('AzureAvailabilityOptions'), 'Availability Zone'), not(equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')))]",
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]",
            "zones": ["[variables('availabilityZoneNumberForPublicIpAddresses')]"],
            "sku": {
                "name": "Standard"
            },
            "name": "[concat(variables('extSelfPublicIpAddressNamePrefix'),concat('-az',variables('availabilityZoneNumberForPublicIpAddresses')), '1')]", 
            "properties": {
                "idleTimeoutInMinutes": 30, 
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/publicIPAddresses"
        }, 
        { 
            "condition": "[or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant'))]",
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]", 
            "sku": {
                "name": "[if(equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant'), 'Standard', 'Basic')]"            },
            "name": "[concat(variables('extSelfPublicIpAddressNamePrefix'), '1')]", 
            "properties": {
                "idleTimeoutInMinutes": 30, 
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/publicIPAddresses"
        }, 
        {
            "condition": "[and(equals(parameters('AzureAvailabilityOptions'), 'Availability Zone'), not(equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), equals(parameters('BIGIPAvailabilityType'), 'Cluster_with_3_members'))]",
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]",
            "zones": ["[variables('availabilityZoneNumberForPublicIpAddresses')]"],
            "sku": {
                "name": "Standard"
            },
            "name": "[concat(variables('extSelfPublicIpAddressNamePrefix'),concat('-az',variables('availabilityZoneNumberForPublicIpAddresses')), '2')]", 
            "properties": {
                "idleTimeoutInMinutes": 30, 
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/publicIPAddresses"
        },
        { 
            "condition": "[and(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), equals(parameters('BIGIPAvailabilityType'), 'Cluster_with_3_members'))]",
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]", 
            "sku": {
                "name": "[if(equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant'), 'Standard', 'Basic')]"            },
            "name": "[concat(variables('extSelfPublicIpAddressNamePrefix'), '2')]", 
            "properties": {
                "idleTimeoutInMinutes": 30, 
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/publicIPAddresses"
        },
        {
            "condition": "[and(and(equals(parameters('AzureAvailabilityOptions'), 'Availability Zone'), not(equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant'))), not(equals(variables('numberOfExternalIps'),0)))]",
            "apiVersion": "[variables('networkApiVersion')]", 
            "copy": {
                "count": "[if(not(equals(variables('numberOfExternalIps'), 0)), variables('numberOfExternalIps'), 1)]", 
                "name": "extpipcopy"
            }, 
            "location": "[variables('location')]",
            "zones": ["[variables('availabilityZoneNumberForPublicIpAddresses')]"],
            "sku": {
                "name": "Standard"
            },
            "name": "[concat(variables('extPublicIPAddressNamePrefix'), '-az',variables('availabilityZoneNumberForPublicIpAddresses'), copyIndex())]", 
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('dnsLabel'), '-az',variables('availabilityZoneNumberForPublicIpAddresses'), copyIndex(0))]"
                }, 
                "idleTimeoutInMinutes": 30, 
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/publicIPAddresses"
        }, 
        {
            "condition": "[and(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), not(equals(variables('numberOfExternalIps'),0)))]",
            "apiVersion": "[variables('networkApiVersion')]", 
            "copy": {
                "count": "[if(not(equals(variables('numberOfExternalIps'), 0)), variables('numberOfExternalIps'), 1)]", 
                "name": "extpipcopy"
            }, 
            "location": "[variables('location')]", 
            "sku": {
                "name": "[if(equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant'), 'Standard', 'Basic')]"          
            },
            "name": "[concat(variables('extPublicIPAddressNamePrefix'), copyIndex())]", 
            "properties": {
                "dnsSettings": {
                    "domainNameLabel": "[concat(variables('dnsLabel'), copyIndex(0))]"
                }, 
                "idleTimeoutInMinutes": 30, 
                "publicIPAllocationMethod": "[variables('publicIPAddressType')]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/publicIPAddresses"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "location": "[variables('location')]", 
            "name": "[variables('virtualNetworkName')]", 
            "properties": {
                "addressSpace": {
                    "addressPrefixes": [
                        "[variables('vnetAddressPrefix')]"
                    ]
                }, 
                "subnets": [
                    {
                        "name": "[variables('mgmtSubnetName')]", 
                        "properties": {
                            "addressPrefix": "[variables('mgmtSubnetPrefix')]"
                        }
                    }, 
                    {
                        "name": "[variables('extSubnetName')]", 
                        "properties": {
                            "addressPrefix": "[variables('extSubnetPrefix')]"
                        }
                    }, 
                    {
                        "name": "[variables('intSubnetName')]", 
                        "properties": {
                            "addressPrefix": "[variables('intSubnetPrefix')]"
                        }
                    }
                ]
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/virtualNetworks"
        }, 
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "dependsOn": [
                "[variables('vnetId')]", 
                "[variables('mgmtNsgID')]", 
                "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), concat('Microsoft.Network/publicIPAddresses/', variables('mgmtPublicIPAddressName'), '0'), concat('Microsoft.Network/publicIPAddresses/', variables('mgmtPublicIPAddressName'), concat('-az',variables('availabilityZoneNumberForPublicIpAddresses')), '0'))]"
            ], 
            "location": "[variables('location')]",
            "name": "[concat(variables('mgmtNicName'), '0')]", 
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabel'), '-mgmt-ipconfig')]", 
                        "properties": {
                            "PublicIpAddress": {
                                "Id": "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), resourceId('Microsoft.Network/publicIPAddresses/', concat(variables('mgmtPublicIPAddressName'), '0')), resourceId('Microsoft.Network/publicIPAddresses/', concat(variables('mgmtPublicIPAddressName'), '-az', variables('availabilityZoneNumberForPublicIpAddresses'), '0')))]"
                            }, 
                            "privateIPAddress": "[variables('mgmtSubnetPrivateAddress')]", 
                            "privateIPAllocationMethod": "Static", 
                            "subnet": {
                                "id": "[variables('mgmtSubnetId')]"
                            }
                        }
                    }
                ], 
                "networkSecurityGroup": {
                    "id": "[variables('mgmtNsgId')]"
                }
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/networkInterfaces"
        }, 
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "dependsOn": [
                "[variables('vnetId')]", 
                "[variables('mgmtNsgID')]", 
                "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), concat('Microsoft.Network/publicIPAddresses/', variables('mgmtPublicIPAddressName'), '1'), concat('Microsoft.Network/publicIPAddresses/', variables('mgmtPublicIPAddressName'), '-az',variables('availabilityZoneNumberForPublicIpAddresses'), '1'))]"
            ], 
            "location": "[variables('location')]",
            "name": "[concat(variables('mgmtNicName'), '1')]", 
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabel'), '-mgmt-ipconfig')]", 
                        "properties": {
                            "PublicIpAddress": {
                                "Id": "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), resourceId('Microsoft.Network/publicIPAddresses/', concat(variables('mgmtPublicIPAddressName'), '1')), resourceId('Microsoft.Network/publicIPAddresses/', concat(variables('mgmtPublicIPAddressName'), '-az', variables('availabilityZoneNumberForPublicIpAddresses'), '1')))]"
                            }, 
                            "privateIPAddress": "[variables('mgmtSubnetPrivateAddress1')]", 
                            "privateIPAllocationMethod": "Static", 
                            "subnet": {
                                "id": "[variables('mgmtSubnetId')]"
                            }
                        }
                    }
                ], 
                "networkSecurityGroup": {
                    "id": "[variables('mgmtNsgId')]"
                }
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/networkInterfaces"
        }, 
        {
            "condition": "[equals(parameters('BIGIPAvailabilityType'), 'Cluster_with_3_members')]",
            "apiVersion": "[variables('networkApiVersion')]", 
            "dependsOn": [
                "[variables('vnetId')]", 
                "[variables('mgmtNsgID')]", 
                "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), concat('Microsoft.Network/publicIPAddresses/', variables('mgmtPublicIPAddressName'), '2'), concat('Microsoft.Network/publicIPAddresses/', variables('mgmtPublicIPAddressName'), '-az',variables('availabilityZoneNumberForPublicIpAddresses'), '2'))]"
            ], 
            "location": "[variables('location')]",
            "name": "[concat(variables('mgmtNicName'), '2')]", 
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabel'), '-mgmt-ipconfig')]", 
                        "properties": {
                            "PublicIpAddress": {
                                "Id": "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), resourceId('Microsoft.Network/publicIPAddresses/', concat(variables('mgmtPublicIPAddressName'), '2')), resourceId('Microsoft.Network/publicIPAddresses/', concat(variables('mgmtPublicIPAddressName'), '-az', variables('availabilityZoneNumberForPublicIpAddresses'), '2')))]"
                            }, 
                            "privateIPAddress": "[variables('mgmtSubnetPrivateAddress2')]", 
                            "privateIPAllocationMethod": "Static", 
                            "subnet": {
                                "id": "[variables('mgmtSubnetId')]"
                            }
                        }
                    }
                ], 
                "networkSecurityGroup": {
                    "id": "[variables('mgmtNsgId')]"
                }
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "dependsOn": [
                "[variables('vnetId')]", 
                "[variables('extNsgID')]", 
                "extpipcopy", 
                "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), concat('Microsoft.Network/publicIPAddresses/', variables('extSelfPublicIpAddressNamePrefix'), '0'), concat('Microsoft.Network/publicIPAddresses/', variables('extSelfPublicIpAddressNamePrefix'), '-az', variables('availabilityZoneNumberForPublicIpAddresses'), '0'))]", 
                "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), variables('extLbId'), concat(variables('extLbId'), '-az', variables('availabilityZoneNumberForPublicIpAddresses')))]"
            ], 
            "location": "[variables('location')]",
            "name": "[concat(variables('extNicName'), '0')]", 
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('instanceName'), '-self-ipconfig')]", 
                        "properties": {
                            "PublicIpAddress": {
                                "Id": "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), concat(variables('extSelfPublicIpAddressIdPrefix'), '0'), concat(variables('extSelfPublicIpAddressIdPrefix'), '-az', variables('availabilityZoneNumberForPublicIpAddresses'), '0'))]"
                            }, 
                            "primary": true, 
                            "privateIPAddress": "[variables('extSubnetPrivateAddress')]", 
                            "privateIPAllocationMethod": "Static", 
                            "subnet": {
                                "id": "[variables('extSubnetId')]"
                            }
                        }
                    }, 
                    {
                        "name": "[concat(variables('resourceGroupName'), '-ext-ipconfig0')]", 
                        "properties": {
                            "loadBalancerBackendAddressPools": "[if(equals(variables('numberOfExternalIps'), 0), take(variables('backEndAddressPoolArray'), 0), take(variables('backEndAddressPoolArray'), 1))]", 
                            "primary": false, 
                            "privateIPAddress": "[concat(variables('extSubnetPrivateAddressPrefix'), 10)]", 
                            "privateIPAllocationMethod": "Static", 
                            "subnet": {
                                "id": "[variables('extSubnetId')]"
                            }
                        }
                    }
                ], 
                "networkSecurityGroup": {
                    "id": "[concat(variables('extNsgId'))]"
                }
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/networkInterfaces"
        }, 
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "dependsOn": [
                "[variables('vnetId')]", 
                "[variables('extNsgID')]", 
                "extpipcopy", 
                "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), concat('Microsoft.Network/publicIPAddresses/', variables('extSelfPublicIpAddressNamePrefix'), '1'), concat('Microsoft.Network/publicIPAddresses/', variables('extSelfPublicIpAddressNamePrefix'), '-az', variables('availabilityZoneNumberForPublicIpAddresses'), '1'))]", 
                "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), variables('extLbId'), concat(variables('extLbId'), '-az', variables('availabilityZoneNumberForPublicIpAddresses')))]"
            ], 
            "location": "[variables('location')]",
            "name": "[concat(variables('extNicName'), '1')]", 
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('instanceName'), '-self-ipconfig')]", 
                        "properties": {
                            "PublicIpAddress": {
                                "Id": "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), concat(variables('extSelfPublicIpAddressIdPrefix'), '1'), concat(variables('extSelfPublicIpAddressIdPrefix'), '-az', variables('availabilityZoneNumberForPublicIpAddresses'), '1'))]"
                            }, 
                            "primary": true, 
                            "privateIPAddress": "[variables('extSubnetPrivateAddress1')]", 
                            "privateIPAllocationMethod": "Static", 
                            "subnet": {
                                "id": "[variables('extSubnetId')]"
                            }
                        }
                    }, 
                    {
                        "name": "[concat(variables('resourceGroupName'), '-ext-ipconfig1')]", 
                        "properties": {
                            "loadBalancerBackendAddressPools": "[if(equals(variables('numberOfExternalIps'), 0), take(variables('backEndAddressPoolArray'), 0), take(variables('backEndAddressPoolArray'), 1))]", 
                            "primary": false, 
                            "privateIPAddress": "[concat(variables('extSubnetPrivateAddressPrefix'), 11)]", 
                            "privateIPAllocationMethod": "Static", 
                            "subnet": {
                                "id": "[variables('extSubnetId')]"
                            }
                        }
                    }
                ], 
                "networkSecurityGroup": {
                    "id": "[concat(variables('extNsgId'))]"
                }
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/networkInterfaces"
        }, 
        {
            "condition": "[equals(parameters('BIGIPAvailabilityType'), 'Cluster_with_3_members')]",
            "apiVersion": "[variables('networkApiVersion')]", 
            "dependsOn": [
                "[variables('vnetId')]", 
                "[variables('extNsgID')]", 
                "extpipcopy", 
                "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), concat('Microsoft.Network/publicIPAddresses/', variables('extSelfPublicIpAddressNamePrefix'), '2'), concat('Microsoft.Network/publicIPAddresses/', variables('extSelfPublicIpAddressNamePrefix'), '-az', variables('availabilityZoneNumberForPublicIpAddresses'), '2'))]", 
                "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), variables('extLbId'), concat(variables('extLbId'), '-az', variables('availabilityZoneNumberForPublicIpAddresses')))]"
            ], 
            "location": "[variables('location')]",
            "name": "[concat(variables('extNicName'), '2')]", 
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('instanceName'), '-self-ipconfig')]", 
                        "properties": {
                            "PublicIpAddress": {
                                "Id": "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), concat(variables('extSelfPublicIpAddressIdPrefix'), '2'), concat(variables('extSelfPublicIpAddressIdPrefix'), '-az', variables('availabilityZoneNumberForPublicIpAddresses'), '2'))]"
                            }, 
                            "primary": true, 
                            "privateIPAddress": "[variables('extSubnetPrivateAddress2')]", 
                            "privateIPAllocationMethod": "Static", 
                            "subnet": {
                                "id": "[variables('extSubnetId')]"
                            }
                        }
                    }, 
                    {
                        "name": "[concat(variables('resourceGroupName'), '-ext-ipconfig2')]", 
                        "properties": {
                            "loadBalancerBackendAddressPools": "[if(equals(variables('numberOfExternalIps'), 0), take(variables('backEndAddressPoolArray'), 0), take(variables('backEndAddressPoolArray'), 1))]", 
                            "primary": false, 
                            "privateIPAddress": "[concat(variables('extSubnetPrivateAddressPrefix'), 12)]", 
                            "privateIPAllocationMethod": "Static", 
                            "subnet": {
                                "id": "[variables('extSubnetId')]"
                            }
                        }
                    }
                ], 
                "networkSecurityGroup": {
                    "id": "[concat(variables('extNsgId'))]"
                }
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "dependsOn": [
                "[variables('vnetId')]", 
                "[variables('extNsgID')]", 
                "extpipcopy", 
                "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), concat('Microsoft.Network/publicIPAddresses/', variables('extSelfPublicIpAddressNamePrefix'), '0'), concat('Microsoft.Network/publicIPAddresses/', variables('extSelfPublicIpAddressNamePrefix'), '-az', variables('availabilityZoneNumberForPublicIpAddresses'), '0'))]", 
                "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), variables('intLbId'), concat(variables('intLbId'), '-az', variables('availabilityZoneNumberForPublicIpAddresses')))]"
            ], 
            "location": "[variables('location')]",
            "name": "[concat(variables('intNicName'), '0')]", 
            "properties": {
                "enableIPForwarding": true, 
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabel'), '-int-ipconfig')]", 
                        "properties": {
                            "primary": true, 
                            "privateIPAddress": "[variables('intSubnetPrivateAddress')]", 
                            "privateIPAllocationMethod": "Static", 
                            "subnet": {
                                "id": "[variables('intSubnetId')]"
                            }
                        }
                    }, 
                    {
                        "name": "[concat(variables('dnsLabel'), '-int-ipconfig-secondary')]", 
                        "properties": {
                            "loadBalancerBackendAddressPools": "[if(equals(parameters('AzureInternalLoadBalancerType'), 'DO_NOT_USE'), take(variables('backEndAddressPoolArray'), 0), skip(variables('backEndAddressPoolArray'), 1))]", 
                            "privateIPAddress": "[variables('intSubnetPrivateAddress2')]", 
                            "privateIPAllocationMethod": "Static", 
                            "subnet": {
                                "id": "[variables('intSubnetId')]"
                            }
                        }
                    }
                ], 
                "primary": true
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/networkInterfaces"
        }, 
        {
            "apiVersion": "[variables('networkApiVersion')]", 
            "dependsOn": [
                "[variables('vnetId')]", 
                "[variables('extNsgID')]", 
                "extpipcopy", 
                "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), concat('Microsoft.Network/publicIPAddresses/', variables('extSelfPublicIpAddressNamePrefix'), '1'), concat('Microsoft.Network/publicIPAddresses/', variables('extSelfPublicIpAddressNamePrefix'), '-az', variables('availabilityZoneNumberForPublicIpAddresses'), '1'))]", 
                "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), variables('intLbId'), concat(variables('intLbId'), '-az', variables('availabilityZoneNumberForPublicIpAddresses')))]"
            ], 
            "location": "[variables('location')]",
            "name": "[concat(variables('intNicName'), '1')]", 
            "properties": {
                "enableIPForwarding": true, 
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabel'), '-int-ipconfig')]", 
                        "properties": {
                            "primary": true, 
                            "privateIPAddress": "[variables('intSubnetPrivateAddress1')]", 
                            "privateIPAllocationMethod": "Static", 
                            "subnet": {
                                "id": "[variables('intSubnetId')]"
                            }
                        }
                    }, 
                    {
                        "name": "[concat(variables('dnsLabel'), '-int-ipconfig-secondary')]", 
                        "properties": {
                            "loadBalancerBackendAddressPools": "[if(equals(parameters('AzureInternalLoadBalancerType'), 'DO_NOT_USE'), take(variables('backEndAddressPoolArray'), 0), skip(variables('backEndAddressPoolArray'), 1))]", 
                            "privateIPAddress": "[variables('intSubnetPrivateAddress3')]", 
                            "privateIPAllocationMethod": "Static", 
                            "subnet": {
                                "id": "[variables('intSubnetId')]"
                            }
                        }
                    }
                ], 
                "primary": true
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/networkInterfaces"
        }, 
        {
            "condition": "[equals(parameters('BIGIPAvailabilityType'), 'Cluster_with_3_members')]",
            "apiVersion": "[variables('networkApiVersion')]", 
            "dependsOn": [
                "[variables('vnetId')]", 
                "[variables('extNsgID')]", 
                "extpipcopy", 
                "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), concat('Microsoft.Network/publicIPAddresses/', variables('extSelfPublicIpAddressNamePrefix'), '2'), concat('Microsoft.Network/publicIPAddresses/', variables('extSelfPublicIpAddressNamePrefix'), '-az', variables('availabilityZoneNumberForPublicIpAddresses'), '2'))]", 
                "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), variables('intLbId'), concat(variables('intLbId'), '-az', variables('availabilityZoneNumberForPublicIpAddresses')))]"
            ], 
            "location": "[variables('location')]",
            "name": "[concat(variables('intNicName'), '2')]", 
            "properties": {
                "enableIPForwarding": true, 
                "ipConfigurations": [
                    {
                        "name": "[concat(variables('dnsLabel'), '-int-ipconfig')]", 
                        "properties": {
                            "primary": true, 
                            "privateIPAddress": "[variables('intSubnetPrivateAddress4')]", 
                            "privateIPAllocationMethod": "Static", 
                            "subnet": {
                                "id": "[variables('intSubnetId')]"
                            }
                        }
                    }, 
                    {
                        "name": "[concat(variables('dnsLabel'), '-int-ipconfig-secondary')]", 
                        "properties": {
                            "loadBalancerBackendAddressPools": "[if(equals(parameters('AzureInternalLoadBalancerType'), 'DO_NOT_USE'), take(variables('backEndAddressPoolArray'), 0), skip(variables('backEndAddressPoolArray'), 1))]", 
                            "privateIPAddress": "[variables('intSubnetPrivateAddress5')]", 
                            "privateIPAllocationMethod": "Static", 
                            "subnet": {
                                "id": "[variables('intSubnetId')]"
                            }
                        }
                    }
                ], 
                "primary": true
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/networkInterfaces"
        },
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]", 
            "name": "[concat(variables('dnsLabel'), '-mgmt-nsg')]", 
            "properties": {
                "securityRules": [
                    {
                        "name": "mgmt_allow_https", 
                        "properties": {
                            "access": "Allow", 
                            "description": "", 
                            "destinationAddressPrefix": "*", 
                            "destinationPortRange": "[variables('bigIpMgmtPort')]", 
                            "direction": "Inbound", 
                            "priority": 101, 
                            "protocol": "Tcp", 
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]", 
                            "sourcePortRange": "*"
                        }
                    }, 
                    {
                        "name": "ssh_allow_22", 
                        "properties": {
                            "access": "Allow", 
                            "description": "", 
                            "destinationAddressPrefix": "*", 
                            "destinationPortRange": "22", 
                            "direction": "Inbound", 
                            "priority": 102, 
                            "protocol": "Tcp", 
                            "sourceAddressPrefix": "[parameters('restrictedSrcAddress')]", 
                            "sourcePortRange": "*"
                        }
                    }
                ]
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/networkSecurityGroups"
        }, 
        {
            "apiVersion": "[variables('networkApiVersion')]",
            "location": "[variables('location')]", 
            "name": "[concat(variables('dnsLabel'), '-ext-nsg')]", 
            "properties": {
                "securityRules": []
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/networkSecurityGroups"
        }, 
        {
            "condition": "[and(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), not(equals(variables('numberOfExternalIps'),0)))]", 
            "apiVersion": "[variables('networkApiVersion')]", 
             "dependsOn": [
                "extpipcopy"
            ], 
            "location": "[variables('location')]", 
            "name": "[variables('externalLoadBalancerName')]",
            "sku": {
                "name": "[if(equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant'), 'Standard', 'Basic')]"
            },
            "properties": {
                "backendAddressPools": [
                    {
                        "name": "loadBalancerBackEnd"
                    }
                ], 
                "copy": [
                    {
                        "count": "[if(not(equals(variables('numberOfExternalIps'), 0)), variables('numberOfExternalIps'), 1)]", 
                        "input": {
                            "name": "[concat('loadBalancerFrontEnd', copyIndex('frontendIPConfigurations', 1))]", 
                            "properties": {
                                "publicIPAddress": {
                                    "id": "[concat(variables('extPublicIPAddressIdPrefix'), sub(copyIndex('frontendIPConfigurations', 1), 1))]"
                                }
                            }
                        }, 
                        "name": "frontendIPConfigurations"
                    }
                ]
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/loadBalancers"
        },
        {
            "condition": "[and(and(equals(parameters('AzureAvailabilityOptions'), 'Availability Zone'), not(equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant'))), not(equals(variables('numberOfExternalIps'),0)))]",
            "apiVersion": "[variables('networkApiVersion')]", 
            "dependsOn": [
                "extpipcopy"
            ], 
            "location": "[variables('location')]",
            "name": "[concat(variables('externalLoadBalancerName'), '-az', variables('availabilityZoneNumberForPublicIpAddresses'))]",
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "backendAddressPools": [
                    {
                        "name": "loadBalancerBackEnd"
                    }
                ], 
                "copy": [
                    {
                        "count": "[if(not(equals(variables('numberOfExternalIps'), 0)), variables('numberOfExternalIps'), 1)]", 
                        "input": {
                            "name": "[concat('loadBalancerFrontEnd', copyIndex('frontendIPConfigurations', 1))]", 
                            "properties": {
                                "publicIPAddress": {
                                    "id": "[concat(variables('extPublicIPAddressIdPrefix'), sub(copyIndex('frontendIPConfigurations', 1), 1))]"
                                }
                            }
                        }, 
                        "name": "frontendIPConfigurations"
                    }
                ]
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/loadBalancers"
        }, 
        {
            "condition": "[and(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), not(equals(parameters('AzureInternalLoadBalancerType'),'DO_NOT_USE')))]", 
            "apiVersion": "[variables('networkApiVersion')]", 
            "dependsOn": [
                "[variables('vnetId')]", 
                "[variables('extNsgID')]", 
                "extpipcopy"
            ], 
            "location": "[variables('location')]", 
            "name": "[variables('internalLoadBalancerName')]", 
            "sku": {
                "name": "[if(equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant'), 'Standard', 'Basic')]"
            },
            "properties": {
                "backendAddressPools": [
                    {
                        "name": "LoadBalancerBackEnd"
                    }
                ], 
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd", 
                        "properties": {
                            "privateIPAddress": "[variables('internalLoadBalancerAddress')]", 
                            "privateIPAllocationMethod": "Static", 
                            "subnet": {
                                "id": "[variables('intSubnetId')]"
                            }
                        }
                    }
                ], 
                "loadBalancingRules": [
                    {
                        "name": "[if(equals(parameters('AzureInternalLoadBalancerType'),'Per-protocol'), concat('lbRule-', parameters('AzureInternalLoadBalancerProbePort')), 'allProtocolLbRule')]", 
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalLoadBalancerName')), '/backendAddressPools/loadBalancerBackEnd')]"
                            }, 
                            "backendPort": "[if(equals(parameters('AzureInternalLoadBalancerType'),'Per-protocol'), parameters('AzureInternalLoadBalancerProbePort'), 0)]", 
                            "enableFloatingIP": false, 
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalLoadBalancerName')), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
                            }, 
                            "frontendPort": "[if(equals(parameters('AzureInternalLoadBalancerType'),'Per-protocol'), parameters('AzureInternalLoadBalancerProbePort'), 0)]", 
                            "idleTimeoutInMinutes": 15, 
                            "loadDistribution": "Default", 
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('internalLoadBalancerName')), '/probes/tcp-probe-', parameters('AzureInternalLoadBalancerProbePort'))]"
                            }, 
                            "protocol": "[if(equals(parameters('AzureInternalLoadBalancerType'),'Per-protocol'), 'Tcp', 'All')]"
                        }
                    }
                ], 
                "probes": [
                    {
                        "name": "[concat('tcp-probe-', parameters('AzureInternalLoadBalancerProbePort'))]", 
                        "properties": {
                            "intervalInSeconds": 5, 
                            "numberOfProbes": 2, 
                            "port": "[parameters('AzureInternalLoadBalancerProbePort')]", 
                            "protocol": "Tcp"
                        }
                    }
                ]
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/loadBalancers"
        }, 
        {
            "condition": "[and(and(equals(parameters('AzureAvailabilityOptions'), 'Availability Zone'), not(equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant'))), not(equals(parameters('AzureInternalLoadBalancerType'),'DO_NOT_USE')))]",
            "apiVersion": "[variables('networkApiVersion')]", 
            "dependsOn": [
                "[variables('vnetId')]", 
                "[variables('extNsgID')]", 
                "extpipcopy"
            ], 
            "location": "[variables('location')]", 
            "name": "[concat(variables('internalLoadBalancerName'), '-az', variables('availabilityZoneNumberForPublicIpAddresses'))]", 
            "sku": {
                "name": "Standard"
            },
            "properties": {
                "backendAddressPools": [
                    {
                        "name": "LoadBalancerBackEnd"
                    }
                ], 
                "frontendIPConfigurations": [
                    {
                        "name": "LoadBalancerFrontEnd", 
                        "properties": {
                            "privateIPAddress": "[variables('internalLoadBalancerAddress')]", 
                            "privateIPAllocationMethod": "Static", 
                            "subnet": {
                                "id": "[variables('intSubnetId')]"
                            }
                        }
                    }
                ], 
                "loadBalancingRules": [
                    {
                        "name": "[if(equals(parameters('AzureInternalLoadBalancerType'),'Per-protocol'), concat('lbRule-', parameters('AzureInternalLoadBalancerProbePort')), 'allProtocolLbRule')]", 
                        "properties": {
                            "backendAddressPool": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat(variables('internalLoadBalancerName'), '-az',variables('availabilityZoneNumberForPublicIpAddresses'))), '/backendAddressPools/loadBalancerBackEnd')]"
                            }, 
                            "backendPort": "[if(equals(parameters('AzureInternalLoadBalancerType'),'Per-protocol'), parameters('AzureInternalLoadBalancerProbePort'), 0)]", 
                            "enableFloatingIP": false, 
                            "frontendIPConfiguration": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat(variables('internalLoadBalancerName'), '-az',variables('availabilityZoneNumberForPublicIpAddresses'))), '/frontendIpConfigurations/loadBalancerFrontEnd')]"
                            }, 
                            "frontendPort": "[if(equals(parameters('AzureInternalLoadBalancerType'),'Per-protocol'), parameters('AzureInternalLoadBalancerProbePort'), 0)]", 
                            "idleTimeoutInMinutes": 15, 
                            "loadDistribution": "Default", 
                            "probe": {
                                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', concat(variables('internalLoadBalancerName'), '-az',variables('availabilityZoneNumberForPublicIpAddresses'))), '/probes/tcp-probe-', parameters('AzureInternalLoadBalancerProbePort'))]"
                            }, 
                            "protocol": "[if(equals(parameters('AzureInternalLoadBalancerType'),'Per-protocol'), 'Tcp', 'All')]"
                        }
                    }
                ], 
                "probes": [
                    {
                        "name": "[concat('tcp-probe-', parameters('AzureInternalLoadBalancerProbePort'))]", 
                        "properties": {
                            "intervalInSeconds": 5, 
                            "numberOfProbes": 2, 
                            "port": "[parameters('AzureInternalLoadBalancerProbePort')]", 
                            "protocol": "Tcp"
                        }
                    }
                ]
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Network/loadBalancers"
        },
        {
            "condition": "[equals(parameters('AzureAvailabilityOptions'), 'Availability Set')]",
            "apiVersion": "[variables('computeApiVersion')]", 
            "location": "[variables('location')]",
            "name": "[variables('availabilitySetName')]", 
            "properties": {
                "PlatformFaultDomainCount": 2, 
                "PlatformUpdateDomainCount": 2
            }, 
            "sku": {
                "name": "Aligned"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/availabilitySets"
        }, 
        {
            "apiVersion": "[variables('storageApiVersion')]", 
            "kind": "Storage", 
            "location": "[variables('location')]", 
            "name": "[variables('newDataStorageAccountName')]", 
            "properties": {
                "supportsHttpsTrafficOnly": true
            }, 
            "sku": {
                "name": "[variables('dataStorageAccountType')]", 
                "tier": "Standard"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Storage/storageAccounts"
        }, 
        {
            "apiVersion": "[variables('computeApiVersion')]", 
            "condition": "[and(variables('useCustomImage'), variables('createNewCustomImage'))]", 
            "location": "[variables('location')]", 
            "name": "[variables('newCustomImageName')]", 
            "properties": {
                "storageProfile": {
                    "osDisk": {
                        "blobUri": "[variables('customImage')]", 
                        "osState": "Generalized", 
                        "osType": "Linux", 
                        "storageAccountType": "[if(contains(variables('premiumInstanceArray'), parameters('instanceType')), 'Premium_LRS', 'Standard_LRS')]"
                    }
                }
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/images"
        }, 
        {
            "condition": "[equals(parameters('AzureAvailabilityOptions'), 'Availability Zone')]",
            "apiVersion": "[variables('computeApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]",  
                "[variables('newCustomImageName')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'), '0')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('extNicName'), '0')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('intNicName'), '0')]"
            ],
            "location": "[variables('location')]",
            "zones": ["[variables('availabilityZoneNumberForBigIpMember1')]"],
            "name": "[concat(variables('dnsLabel'), '-', variables('instanceName'),concat('-az',variables('availabilityZoneNumberForBigIpMember1')), '0')]", 
            "plan": "[if(variables('useCustomImage'), json('null'), variables('imagePlan'))]", 
            "properties": {
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true, 
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }, 
                "hardwareProfile": {
                    "vmSize": "[parameters('instanceType')]"
                }, 
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('mgmtNicName'), '0'))]", 
                            "properties": {
                                "primary": true
                            }
                        }, 
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('extNicName'), '0'))]", 
                            "properties": {
                                "primary": false
                            }
                        }, 
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('intNicName'), '0'))]", 
                            "properties": {
                                "primary": false
                            }
                        }
                    ]
                }, 
                "osProfile": {
                    "adminPassword": "[variables('adminPasswordOrKey')]", 
                    "adminUsername": "[parameters('adminUsername')]", 
                    "computerName": "[variables('instanceName')]", 
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
                }, 
                "storageProfile": "[if(variables('useCustomImage'), variables('storageProfileArray').customImage, variables('storageProfileArray').platformImage)]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/virtualMachines"
        }, 
        {
            "condition": "[equals(parameters('AzureAvailabilityOptions'), 'Availability Set')]",
            "apiVersion": "[variables('computeApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]", 
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]", 
                "[variables('newCustomImageName')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'), '0')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('extNicName'), '0')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('intNicName'), '0')]"
            ], 
            "location": "[variables('location')]", 
            "name": "[concat(variables('dnsLabel'), '-', variables('instanceName'), '0')]", 
            "plan": "[if(variables('useCustomImage'), json('null'), variables('imagePlan'))]", 
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
                }, 
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true, 
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }, 
                "hardwareProfile": {
                    "vmSize": "[parameters('instanceType')]"
                }, 
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('mgmtNicName'), '0'))]", 
                            "properties": {
                                "primary": true
                            }
                        }, 
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('extNicName'), '0'))]", 
                            "properties": {
                                "primary": false
                            }
                        }, 
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('intNicName'), '0'))]", 
                            "properties": {
                                "primary": false
                            }
                        }
                    ]
                }, 
                "osProfile": {
                    "adminPassword": "[variables('adminPasswordOrKey')]", 
                    "adminUsername": "[parameters('adminUsername')]", 
                    "computerName": "[variables('instanceName')]", 
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
                }, 
                "storageProfile": "[if(variables('useCustomImage'), variables('storageProfileArray').customImage, variables('storageProfileArray').platformImage)]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/virtualMachines"
        }, 
        {
            "condition": "[equals(parameters('AzureAvailabilityOptions'), 'Availability Zone')]",
            "apiVersion": "[variables('computeApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]", 
                "[variables('newCustomImageName')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'), '1')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('extNicName'), '1')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('intNicName'), '1')]"
            ],
            "location": "[variables('location')]",      
            "zones": ["[variables('availabilityZoneNumberForBigIpMember2')]"],
            "name": "[concat(variables('dnsLabel'), '-', variables('instanceName'),concat('-az',variables('availabilityZoneNumberForBigIpMember2')), '1')]", 
            "plan": "[if(variables('useCustomImage'), json('null'), variables('imagePlan'))]", 
            "properties": {
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true, 
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }, 
                "hardwareProfile": {
                    "vmSize": "[parameters('instanceType')]"
                }, 
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('mgmtNicName'), '1'))]", 
                            "properties": {
                                "primary": true
                            }
                        }, 
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('extNicName'), '1'))]", 
                            "properties": {
                                "primary": false
                            }
                        }, 
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('intNicName'), '1'))]", 
                            "properties": {
                                "primary": false
                            }
                        }
                    ]
                }, 
                "osProfile": {
                    "adminPassword": "[variables('adminPasswordOrKey')]", 
                    "adminUsername": "[parameters('adminUsername')]", 
                    "computerName": "[variables('instanceName')]", 
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
                }, 
                "storageProfile": "[if(variables('useCustomImage'), variables('storageProfileArray').customImage, variables('storageProfileArray').platformImage)]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/virtualMachines"
        },
        {
            "condition": "[equals(parameters('AzureAvailabilityOptions'), 'Availability Set')]",
            "apiVersion": "[variables('computeApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]", 
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]", 
                "[variables('newCustomImageName')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'), '1')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('extNicName'), '1')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('intNicName'), '1')]"
            ], 
            "location": "[variables('location')]", 
            "name": "[concat(variables('dnsLabel'), '-', variables('instanceName'), '1')]", 
            "plan": "[if(variables('useCustomImage'), json('null'), variables('imagePlan'))]", 
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
                }, 
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true, 
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }, 
                "hardwareProfile": {
                    "vmSize": "[parameters('instanceType')]"
                }, 
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('mgmtNicName'), '1'))]", 
                            "properties": {
                                "primary": true
                            }
                        }, 
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('extNicName'), '1'))]", 
                            "properties": {
                                "primary": false
                            }
                        }, 
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('intNicName'), '1'))]", 
                            "properties": {
                                "primary": false
                            }
                        }
                    ]
                }, 
                "osProfile": {
                    "adminPassword": "[variables('adminPasswordOrKey')]", 
                    "adminUsername": "[parameters('adminUsername')]", 
                    "computerName": "[variables('instanceName')]", 
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
                }, 
                "storageProfile": "[if(variables('useCustomImage'), variables('storageProfileArray').customImage, variables('storageProfileArray').platformImage)]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/virtualMachines"
        }, 
        {
            "condition": "[and(equals(parameters('AzureAvailabilityOptions'), 'Availability Zone'), equals(parameters('BIGIPAvailabilityType'), 'Cluster_with_3_members'))]",
            "apiVersion": "[variables('computeApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]", 
                "[variables('newCustomImageName')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'), '2')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('extNicName'), '2')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('intNicName'), '2')]"
            ],
            "location": "[variables('location')]",      
            "zones": ["[variables('availabilityZoneNumberForBigIpMember3')]"],
            "name": "[concat(variables('dnsLabel'), '-', variables('instanceName'),concat('-az',variables('availabilityZoneNumberForBigIpMember3')), '2')]", 
            "plan": "[if(variables('useCustomImage'), json('null'), variables('imagePlan'))]", 
            "properties": {
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true, 
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }, 
                "hardwareProfile": {
                    "vmSize": "[parameters('instanceType')]"
                }, 
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('mgmtNicName'), '2'))]", 
                            "properties": {
                                "primary": true
                            }
                        }, 
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('extNicName'), '2'))]", 
                            "properties": {
                                "primary": false
                            }
                        }, 
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('intNicName'), '2'))]", 
                            "properties": {
                                "primary": false
                            }
                        }
                    ]
                }, 
                "osProfile": {
                    "adminPassword": "[variables('adminPasswordOrKey')]", 
                    "adminUsername": "[parameters('adminUsername')]", 
                    "computerName": "[variables('instanceName')]", 
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
                }, 
                "storageProfile": "[if(variables('useCustomImage'), variables('storageProfileArray').customImage, variables('storageProfileArray').platformImage)]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/virtualMachines"
        },
        {
            "condition": "[and(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(parameters('BIGIPAvailabilityType'), 'Cluster_with_3_members'))]",
            "apiVersion": "[variables('computeApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName'))]", 
                "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetName'))]", 
                "[variables('newCustomImageName')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('mgmtNicName'), '2')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('extNicName'), '2')]", 
                "[concat('Microsoft.Network/networkInterfaces/', variables('intNicName'), '2')]"
            ], 
            "location": "[variables('location')]", 
            "name": "[concat(variables('dnsLabel'), '-', variables('instanceName'), '2')]", 
            "plan": "[if(variables('useCustomImage'), json('null'), variables('imagePlan'))]", 
            "properties": {
                "availabilitySet": {
                    "id": "[resourceId('Microsoft.Compute/availabilitySets', variables('availabilitySetName'))]"
                }, 
                "diagnosticsProfile": {
                    "bootDiagnostics": {
                        "enabled": true, 
                        "storageUri": "[reference(concat('Microsoft.Storage/storageAccounts/', variables('newDataStorageAccountName')), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).primaryEndpoints.blob]"
                    }
                }, 
                "hardwareProfile": {
                    "vmSize": "[parameters('instanceType')]"
                }, 
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('mgmtNicName'), '2'))]", 
                            "properties": {
                                "primary": true
                            }
                        }, 
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('extNicName'), '2'))]", 
                            "properties": {
                                "primary": false
                            }
                        }, 
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces/', concat(variables('intNicName'), '2'))]", 
                            "properties": {
                                "primary": false
                            }
                        }
                    ]
                }, 
                "osProfile": {
                    "adminPassword": "[variables('adminPasswordOrKey')]", 
                    "adminUsername": "[parameters('adminUsername')]", 
                    "computerName": "[variables('instanceName')]", 
                    "linuxConfiguration": "[if(equals(parameters('authenticationType'), 'password'), json('null'), variables('linuxConfiguration'))]"
                }, 
                "storageProfile": "[if(variables('useCustomImage'), variables('storageProfileArray').customImage, variables('storageProfileArray').platformImage)]"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/virtualMachines"
        },
        {
            "condition": "[equals(parameters('AzureAvailabilityOptions'), 'Availability Zone')]",
            "apiVersion": "[variables('computeApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabel'), '-', variables('instanceName'),concat('-az',variables('availabilityZoneNumberForBigIpMember1')), '0')]"
            ], 
            "location": "[variables('location')]", 
            "name": "[concat(variables('dnsLabel'),'-', variables('instanceName'), concat('-az',variables('availabilityZoneNumberForBigIpMember1')),'0/start')]", 
            "properties": {
                "autoUpgradeMinorVersion": "true", 
                "protectedSettings": {
                    "commandToExecute": "[concat(variables('CommandToExecuteArray').COMMON.Header, variables('CommandToExecuteArray')[variables('consumptionModel')].Node0.Header, if(equals(variables('consumptionModel'), 'BIGIQ'), reference(concat(variables('mgmtPublicIPAddressId'), '0')).ipAddress, ';'), variables('CommandToExecuteArray')[variables('consumptionModel')].Node0.Trailer, variables('CommandToExecuteArray').COMMON.Trailer)]"
                                    }, 
                "publisher": "Microsoft.Azure.Extensions", 
                "settings": {
                    "fileUris": [
                        "[concat('https://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/', variables('f5CloudLibsTag'), '/f5-cloud-libs.tar.gz')]", 
                        "[concat('https://cdn.f5.com/product/cloudsolutions/f5-appsvcs-extension/', variables('f5AS3Tag'), '/dist/lts/', variables('f5AS3Build'))]", 
                        "[concat('https://cdn.f5.com/product/cloudsolutions/iapps/common/f5-service-discovery/', variables('f5CloudIappsSdTag'), '/f5.service_discovery.tmpl')]", 
                        "[concat('https://cdn.f5.com/product/cloudsolutions/iapps/common/f5-cloud-logger/', variables('f5CloudIappsLoggerTag'), '/f5.cloud_logger.v1.0.0.tmpl')]"
                    ]
                }, 
                "type": "CustomScript", 
                "typeHandlerVersion": "2.0"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/virtualMachines/extensions"
        }, 
        {
            "condition": "[equals(parameters('AzureAvailabilityOptions'), 'Availability Set')]",
            "apiVersion": "[variables('computeApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabel'), '-', variables('instanceName'), '0')]"
            ], 
            "location": "[variables('location')]", 
            "name": "[concat(variables('dnsLabel'), '-', variables('instanceName'), '0/start')]", 
            "properties": {
                "autoUpgradeMinorVersion": "true", 
                "protectedSettings": {
                    "commandToExecute": "[concat(variables('CommandToExecuteArray').COMMON.Header, variables('CommandToExecuteArray')[variables('consumptionModel')].Node0.Header, if(equals(variables('consumptionModel'), 'BIGIQ'), reference(concat(variables('mgmtPublicIPAddressId'), '0')).ipAddress, ';'), variables('CommandToExecuteArray')[variables('consumptionModel')].Node0.Trailer, variables('CommandToExecuteArray').COMMON.Trailer)]"
                }, 
                "publisher": "Microsoft.Azure.Extensions", 
                "settings": {
                    "fileUris": [
                        "[concat('https://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/', variables('f5CloudLibsTag'), '/f5-cloud-libs.tar.gz')]", 
                        "[concat('https://cdn.f5.com/product/cloudsolutions/f5-appsvcs-extension/', variables('f5AS3Tag'), '/dist/lts/', variables('f5AS3Build'))]", 
                        "[concat('https://cdn.f5.com/product/cloudsolutions/iapps/common/f5-service-discovery/', variables('f5CloudIappsSdTag'), '/f5.service_discovery.tmpl')]", 
                        "[concat('https://cdn.f5.com/product/cloudsolutions/iapps/common/f5-cloud-logger/', variables('f5CloudIappsLoggerTag'), '/f5.cloud_logger.v1.0.0.tmpl')]"
                    ]
                }, 
                "type": "CustomScript", 
                "typeHandlerVersion": "2.0"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "condition": "[equals(parameters('AzureAvailabilityOptions'), 'Availability Zone')]",
            "apiVersion": "[variables('computeApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabel'), '-', variables('instanceName'),concat('-az',variables('availabilityZoneNumberForBigIpMember2')), '1')]"
            ], 
            "location": "[variables('location')]", 
            "name": "[concat(variables('dnsLabel'),'-', variables('instanceName'), concat('-az',variables('availabilityZoneNumberForBigIpMember2')),'1/start')]", 
            "properties": {
                "autoUpgradeMinorVersion": "true", 
                "protectedSettings": {
                    "commandToExecute": "[concat(variables('CommandToExecuteArray').COMMON.Header, variables('CommandToExecuteArray')[variables('consumptionModel')].Node1.Header, if(equals(variables('consumptionModel'), 'BIGIQ'), reference(concat(variables('mgmtPublicIPAddressId'), '1')).ipAddress, ' ; '), variables('CommandToExecuteArray')[variables('consumptionModel')].Node1.Trailer, variables('CommandToExecuteArray').COMMON.Trailer)]"
                }, 
                "publisher": "Microsoft.Azure.Extensions", 
                "settings": {
                    "fileUris": [
                        "[concat('https://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/', variables('f5CloudLibsTag'), '/f5-cloud-libs.tar.gz')]", 
                        "[concat('https://cdn.f5.com/product/cloudsolutions/f5-appsvcs-extension/', variables('f5AS3Tag'), '/dist/lts/', variables('f5AS3Build'))]", 
                        "[concat('https://cdn.f5.com/product/cloudsolutions/iapps/common/f5-service-discovery/', variables('f5CloudIappsSdTag'), '/f5.service_discovery.tmpl')]", 
                        "[concat('https://cdn.f5.com/product/cloudsolutions/iapps/common/f5-cloud-logger/', variables('f5CloudIappsLoggerTag'), '/f5.cloud_logger.v1.0.0.tmpl')]"
                    ]
                }, 
                "type": "CustomScript", 
                "typeHandlerVersion": "2.0"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "condition": "[equals(parameters('AzureAvailabilityOptions'), 'Availability Set')]",
            "apiVersion": "[variables('computeApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabel'), '-', variables('instanceName'), '1')]"
            ], 
            "location": "[variables('location')]", 
            "name": "[concat(variables('dnsLabel'), '-', variables('instanceName'), '1/start')]", 
            "properties": {
                "autoUpgradeMinorVersion": "true", 
                "protectedSettings": {
                    "commandToExecute": "[concat(variables('CommandToExecuteArray').COMMON.Header, variables('CommandToExecuteArray')[variables('consumptionModel')].Node1.Header, if(equals(variables('consumptionModel'), 'BIGIQ'), reference(concat(variables('mgmtPublicIPAddressId'), '1')).ipAddress, ';'), variables('CommandToExecuteArray')[variables('consumptionModel')].Node1.Trailer, variables('CommandToExecuteArray').COMMON.Trailer)]"
                }, 
                "publisher": "Microsoft.Azure.Extensions", 
                "settings": {
                    "fileUris": [
                        "[concat('https://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/', variables('f5CloudLibsTag'), '/f5-cloud-libs.tar.gz')]", 
                        "[concat('https://cdn.f5.com/product/cloudsolutions/f5-appsvcs-extension/', variables('f5AS3Tag'), '/dist/lts/', variables('f5AS3Build'))]", 
                        "[concat('https://cdn.f5.com/product/cloudsolutions/iapps/common/f5-service-discovery/', variables('f5CloudIappsSdTag'), '/f5.service_discovery.tmpl')]", 
                        "[concat('https://cdn.f5.com/product/cloudsolutions/iapps/common/f5-cloud-logger/', variables('f5CloudIappsLoggerTag'), '/f5.cloud_logger.v1.0.0.tmpl')]"
                     ]
                }, 
                "type": "CustomScript", 
                "typeHandlerVersion": "2.0"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "condition": "[and(equals(parameters('AzureAvailabilityOptions'), 'Availability Zone'), equals(parameters('BIGIPAvailabilityType'), 'Cluster_with_3_members'))]",
            "apiVersion": "[variables('computeApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabel'), '-', variables('instanceName'),concat('-az',variables('availabilityZoneNumberForBigIpMember3')), '2')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', concat(variables('dnsLabel'), '-', variables('instanceName'), '-az',variables('availabilityZoneNumberForBigIpMember2'), '1'), 'start')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', concat(variables('dnsLabel'), '-', variables('instanceName'), '-az',variables('availabilityZoneNumberForBigIpMember1'), '0'), 'start')]"
            ], 
            "location": "[variables('location')]", 
            "name": "[concat(variables('dnsLabel'),'-', variables('instanceName'), concat('-az',variables('availabilityZoneNumberForBigIpMember3')),'2/start')]", 
            "properties": {
                "autoUpgradeMinorVersion": "true", 
                "protectedSettings": {
                    "commandToExecute": "[concat(variables('CommandToExecuteArray').COMMON.Header, variables('CommandToExecuteArray')[variables('consumptionModel')].Node2.Header, if(equals(variables('consumptionModel'), 'BIGIQ'), reference(concat(variables('mgmtPublicIPAddressId'), '2')).ipAddress, ' ; '), variables('CommandToExecuteArray')[variables('consumptionModel')].Node2.Trailer, variables('CommandToExecuteArray').COMMON.Trailer)]"
                }, 
                "publisher": "Microsoft.Azure.Extensions", 
                "settings": {
                    "fileUris": [
                        "[concat('https://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/', variables('f5CloudLibsTag'), '/f5-cloud-libs.tar.gz')]", 
                        "[concat('https://cdn.f5.com/product/cloudsolutions/f5-appsvcs-extension/', variables('f5AS3Tag'), '/dist/lts/', variables('f5AS3Build'))]", 
                        "[concat('https://cdn.f5.com/product/cloudsolutions/iapps/common/f5-service-discovery/', variables('f5CloudIappsSdTag'), '/f5.service_discovery.tmpl')]", 
                        "[concat('https://cdn.f5.com/product/cloudsolutions/iapps/common/f5-cloud-logger/', variables('f5CloudIappsLoggerTag'), '/f5.cloud_logger.v1.0.0.tmpl')]"
                    ]
                }, 
                "type": "CustomScript", 
                "typeHandlerVersion": "2.0"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/virtualMachines/extensions"
        },
        {
            "condition": "[and(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(parameters('BIGIPAvailabilityType'), 'Cluster_with_3_members'))]",
            "apiVersion": "[variables('computeApiVersion')]", 
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('dnsLabel'), '-', variables('instanceName'), '2')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', concat(variables('dnsLabel'), '-', variables('instanceName'), '1'), 'start')]",
                "[resourceId('Microsoft.Compute/virtualMachines/extensions', concat(variables('dnsLabel'), '-', variables('instanceName'), '0'), 'start')]"
            ], 
            "location": "[variables('location')]", 
            "name": "[concat(variables('dnsLabel'), '-', variables('instanceName'), '2/start')]", 
            "properties": {
                "autoUpgradeMinorVersion": "true", 
                "protectedSettings": {
                    "commandToExecute": "[concat(variables('CommandToExecuteArray').COMMON.Header, variables('CommandToExecuteArray')[variables('consumptionModel')].Node2.Header, if(equals(variables('consumptionModel'), 'BIGIQ'), reference(concat(variables('mgmtPublicIPAddressId'), '2')).ipAddress, ';'), variables('CommandToExecuteArray')[variables('consumptionModel')].Node2.Trailer, variables('CommandToExecuteArray').COMMON.Trailer)]"
                }, 
                "publisher": "Microsoft.Azure.Extensions", 
                "settings": {
                    "fileUris": [
                        "[concat('https://cdn.f5.com/product/cloudsolutions/f5-cloud-libs/', variables('f5CloudLibsTag'), '/f5-cloud-libs.tar.gz')]", 
                        "[concat('https://cdn.f5.com/product/cloudsolutions/f5-appsvcs-extension/', variables('f5AS3Tag'), '/dist/lts/', variables('f5AS3Build'))]", 
                        "[concat('https://cdn.f5.com/product/cloudsolutions/iapps/common/f5-service-discovery/', variables('f5CloudIappsSdTag'), '/f5.service_discovery.tmpl')]", 
                        "[concat('https://cdn.f5.com/product/cloudsolutions/iapps/common/f5-cloud-logger/', variables('f5CloudIappsLoggerTag'), '/f5.cloud_logger.v1.0.0.tmpl')]"
                     ]
                }, 
                "type": "CustomScript", 
                "typeHandlerVersion": "2.0"
            }, 
            "tags": "[if(empty(variables('tagValues')), json('null'), variables('tagValues'))]", 
            "type": "Microsoft.Compute/virtualMachines/extensions"
        }
    ], 
    "outputs": {
        "GUI-URL": {
            "type": "string", 
             "value": "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), concat('https://', reference(concat(variables('mgmtPublicIPAddressId'), '0'), variables('networkApiVersion')).dnsSettings.fqdn, ':', variables('bigIpMgmtPort')), concat('https://', reference(concat(variables('mgmtPublicIPAddressId'), '-az', variables('availabilityZoneNumberForPublicIpAddresses'), '0'), variables('networkApiVersion')).dnsSettings.fqdn, ':', variables('bigIpMgmtPort')))]"
        }, 
        "SSH-URL": {
            "type": "string", 
            "value": "[if(or(equals(parameters('AzureAvailabilityOptions'), 'Availability Set'), equals(variables('availabilityZoneNumberForPublicIpAddresses'), 'zoneredundant')), concat(reference(concat(variables('mgmtPublicIPAddressId'), '0'), variables('networkApiVersion')).dnsSettings.fqdn, ' ',22), concat(reference(concat(variables('mgmtPublicIPAddressId'), '-az', variables('availabilityZoneNumberForPublicIpAddresses'), '0'), variables('networkApiVersion')).dnsSettings.fqdn, ' ',22))]"
        }
    }
}